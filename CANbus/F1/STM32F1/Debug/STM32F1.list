
STM32F1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fec  08002fec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fec  08002fec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fec  08002fec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ff0  08002ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08003000  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003000  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bcd  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001837  00000000  00000000  00027c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000800  00000000  00000000  00029440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  00029c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164ab  00000000  00000000  0002a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082e5  00000000  00000000  00040863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080b15  00000000  00000000  00048b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c965d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd0  00000000  00000000  000c96b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fac 	.word	0x08002fac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002fac 	.word	0x08002fac

0800014c <CAN_FILTER_SETUP>:
static void MX_DMA_Init(void);
static void MX_CAN_Init(void);
static void MX_USART2_UART_Init(void);

//setup filter RX
void CAN_FILTER_SETUP(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef canfilterconfig;

	  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000152:	2301      	movs	r3, #1
 8000154:	623b      	str	r3, [r7, #32]
	  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones (0->13)
 8000156:	230a      	movs	r3, #10
 8000158:	617b      	str	r3, [r7, #20]
	  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
	  canfilterconfig.FilterIdHigh = 0;//0x013<<5;
 800015e:	2300      	movs	r3, #0
 8000160:	603b      	str	r3, [r7, #0]
	  canfilterconfig.FilterIdLow = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	607b      	str	r3, [r7, #4]
	  canfilterconfig.FilterMaskIdHigh = 0;//0x013<<5;
 8000166:	2300      	movs	r3, #0
 8000168:	60bb      	str	r3, [r7, #8]
	  canfilterconfig.FilterMaskIdLow = 0x0000;
 800016a:	2300      	movs	r3, #0
 800016c:	60fb      	str	r3, [r7, #12]
	  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800016e:	2300      	movs	r3, #0
 8000170:	61bb      	str	r3, [r7, #24]
	  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000172:	2301      	movs	r3, #1
 8000174:	61fb      	str	r3, [r7, #28]
	  canfilterconfig.SlaveStartFilterBank = 0;  // how many filters to assign to the CAN1 (master can)
 8000176:	2300      	movs	r3, #0
 8000178:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800017a:	463b      	mov	r3, r7
 800017c:	4619      	mov	r1, r3
 800017e:	4803      	ldr	r0, [pc, #12]	; (800018c <CAN_FILTER_SETUP+0x40>)
 8000180:	f000 fcd7 	bl	8000b32 <HAL_CAN_ConfigFilter>


}
 8000184:	bf00      	nop
 8000186:	3728      	adds	r7, #40	; 0x28
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	20000028 	.word	0x20000028

08000190 <HAL_GPIO_EXTI_Callback>:
uint8_t RxData[8];
uint32_t TxMailBox;
int datacheck=0;
//GPIO CALLBACK
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800019a:	88fb      	ldrh	r3, [r7, #6]
 800019c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001a0:	d10b      	bne.n	80001ba <HAL_GPIO_EXTI_Callback+0x2a>
	{
		TxData[0]=100;		//ms Delay
 80001a2:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80001a4:	2264      	movs	r2, #100	; 0x64
 80001a6:	701a      	strb	r2, [r3, #0]
		TxData[1]=10;	//Loop rep
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80001aa:	220a      	movs	r2, #10
 80001ac:	705a      	strb	r2, [r3, #1]
		HAL_CAN_AddTxMessage(&hcan,&TxHeader, TxData, &TxMailBox);
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <HAL_GPIO_EXTI_Callback+0x38>)
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80001b2:	4906      	ldr	r1, [pc, #24]	; (80001cc <HAL_GPIO_EXTI_Callback+0x3c>)
 80001b4:	4806      	ldr	r0, [pc, #24]	; (80001d0 <HAL_GPIO_EXTI_Callback+0x40>)
 80001b6:	f000 fdc9 	bl	8000d4c <HAL_CAN_AddTxMessage>

	}
}
 80001ba:	bf00      	nop
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	20000150 	.word	0x20000150
 80001c8:	20000160 	.word	0x20000160
 80001cc:	2000011c 	.word	0x2000011c
 80001d0:	20000028 	.word	0x20000028

080001d4 <HAL_CAN_RxFifo0MsgPendingCallback>:


//CAN Rx CALLBACK: fifo chưa messa ? sao khong check cai RxHeader ủa là vanac check
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader, RxData);
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80001de:	4a09      	ldr	r2, [pc, #36]	; (8000204 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80001e0:	2100      	movs	r1, #0
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f000 fe8c 	bl	8000f00 <HAL_CAN_GetRxMessage>
	if(RxHeader.DLC==2) //check size
 80001e8:	4b06      	ldr	r3, [pc, #24]	; (8000204 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80001ea:	691b      	ldr	r3, [r3, #16]
 80001ec:	2b02      	cmp	r3, #2
 80001ee:	d102      	bne.n	80001f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck=1;
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80001f2:	2201      	movs	r2, #1
 80001f4:	601a      	str	r2, [r3, #0]
	}

	if(RxHeader.ExtId==0x00)//check dia chi
		;
}
 80001f6:	bf00      	nop
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	20000158 	.word	0x20000158
 8000204:	20000134 	.word	0x20000134
 8000208:	20000164 	.word	0x20000164

0800020c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000210:	f000 fb0e 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000214:	f000 f83a 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000218:	f000 f904 	bl	8000424 <MX_GPIO_Init>
  MX_DMA_Init();
 800021c:	f000 f8dc 	bl	80003d8 <MX_DMA_Init>
  MX_CAN_Init();
 8000220:	f000 f87a 	bl	8000318 <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000224:	f000 f8ae 	bl	8000384 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //CAN:
    	  MX_CAN_Init();
 8000228:	f000 f876 	bl	8000318 <MX_CAN_Init>
    	  HAL_CAN_Start(&hcan);
 800022c:	4813      	ldr	r0, [pc, #76]	; (800027c <main+0x70>)
 800022e:	f000 fd49 	bl	8000cc4 <HAL_CAN_Start>
    	  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000232:	2102      	movs	r1, #2
 8000234:	4811      	ldr	r0, [pc, #68]	; (800027c <main+0x70>)
 8000236:	f000 ff74 	bl	8001122 <HAL_CAN_ActivateNotification>

    	  TxHeader.DLC=2; //data length
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <main+0x74>)
 800023c:	2202      	movs	r2, #2
 800023e:	611a      	str	r2, [r3, #16]
    	  TxHeader.IDE=CAN_ID_STD;		//standard 11bit addr
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <main+0x74>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
    	  TxHeader.RTR=CAN_RTR_DATA;	//data frame
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <main+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
    	  TxHeader.StdId=0x446;			//ID
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <main+0x74>)
 800024e:	f240 4246 	movw	r2, #1094	; 0x446
 8000252:	601a      	str	r2, [r3, #0]
    	  CAN_FILTER_SETUP();//filter
 8000254:	f7ff ff7a 	bl	800014c <CAN_FILTER_SETUP>
//	  		  //do something
//
//	  		  datacheck=0;
//	  	  }
	  {
			TxData[0]='A';		//ms Delay
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <main+0x78>)
 800025a:	2241      	movs	r2, #65	; 0x41
 800025c:	701a      	strb	r2, [r3, #0]
			TxData[1]='B';	//Loop rep
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <main+0x78>)
 8000260:	2242      	movs	r2, #66	; 0x42
 8000262:	705a      	strb	r2, [r3, #1]

			HAL_CAN_AddTxMessage(&hcan,&TxHeader, TxData, &TxMailBox);
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <main+0x7c>)
 8000266:	4a07      	ldr	r2, [pc, #28]	; (8000284 <main+0x78>)
 8000268:	4905      	ldr	r1, [pc, #20]	; (8000280 <main+0x74>)
 800026a:	4804      	ldr	r0, [pc, #16]	; (800027c <main+0x70>)
 800026c:	f000 fd6e 	bl	8000d4c <HAL_CAN_AddTxMessage>
	  }
	  HAL_Delay(1000);
 8000270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000274:	f000 fb3e 	bl	80008f4 <HAL_Delay>
			TxData[0]='A';		//ms Delay
 8000278:	e7ee      	b.n	8000258 <main+0x4c>
 800027a:	bf00      	nop
 800027c:	20000028 	.word	0x20000028
 8000280:	2000011c 	.word	0x2000011c
 8000284:	20000150 	.word	0x20000150
 8000288:	20000160 	.word	0x20000160

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	; 0x40
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fe7e 	bl	8002f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ae:	2301      	movs	r3, #1
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	2301      	movs	r3, #1
 80002be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2302      	movs	r3, #2
 80002c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	f107 0318 	add.w	r3, r7, #24
 80002d4:	4618      	mov	r0, r3
 80002d6:	f001 fe27 	bl	8001f28 <HAL_RCC_OscConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002e0:	f000 f8ee 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e4:	230f      	movs	r3, #15
 80002e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e8:	2302      	movs	r3, #2
 80002ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2102      	movs	r1, #2
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 f894 	bl	800242c <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800030a:	f000 f8d9 	bl	80004c0 <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3740      	adds	r7, #64	; 0x40
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800031c:	4b17      	ldr	r3, [pc, #92]	; (800037c <MX_CAN_Init+0x64>)
 800031e:	4a18      	ldr	r2, [pc, #96]	; (8000380 <MX_CAN_Init+0x68>)
 8000320:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000322:	4b16      	ldr	r3, [pc, #88]	; (800037c <MX_CAN_Init+0x64>)
 8000324:	2212      	movs	r2, #18
 8000326:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000328:	4b14      	ldr	r3, [pc, #80]	; (800037c <MX_CAN_Init+0x64>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800032e:	4b13      	ldr	r3, [pc, #76]	; (800037c <MX_CAN_Init+0x64>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_CAN_Init+0x64>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <MX_CAN_Init+0x64>)
 800033c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000340:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_CAN_Init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_CAN_Init+0x64>)
 800034a:	2200      	movs	r2, #0
 800034c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_CAN_Init+0x64>)
 8000350:	2200      	movs	r2, #0
 8000352:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_CAN_Init+0x64>)
 8000356:	2200      	movs	r2, #0
 8000358:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_CAN_Init+0x64>)
 800035c:	2200      	movs	r2, #0
 800035e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_CAN_Init+0x64>)
 8000362:	2200      	movs	r2, #0
 8000364:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_CAN_Init+0x64>)
 8000368:	f000 fae8 	bl	800093c <HAL_CAN_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8000372:	f000 f8a5 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000028 	.word	0x20000028
 8000380:	40006400 	.word	0x40006400

08000384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000388:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 800038a:	4a12      	ldr	r2, [pc, #72]	; (80003d4 <MX_USART2_UART_Init+0x50>)
 800038c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800038e:	4b10      	ldr	r3, [pc, #64]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 8000390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003aa:	220c      	movs	r2, #12
 80003ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_USART2_UART_Init+0x4c>)
 80003bc:	f002 f9ce 	bl	800275c <HAL_UART_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003c6:	f000 f87b 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000050 	.word	0x20000050
 80003d4:	40004400 	.word	0x40004400

080003d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003de:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_DMA_Init+0x48>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <MX_DMA_Init+0x48>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <MX_DMA_Init+0x48>)
 80003ec:	695b      	ldr	r3, [r3, #20]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	2010      	movs	r0, #16
 80003fc:	f001 f9b1 	bl	8001762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000400:	2010      	movs	r0, #16
 8000402:	f001 f9ca 	bl	800179a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	2100      	movs	r1, #0
 800040a:	2011      	movs	r0, #17
 800040c:	f001 f9a9 	bl	8001762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000410:	2011      	movs	r0, #17
 8000412:	f001 f9c2 	bl	800179a <HAL_NVIC_EnableIRQ>

}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_GPIO_Init+0x90>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <MX_GPIO_Init+0x90>)
 800043e:	f043 0310 	orr.w	r3, r3, #16
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_GPIO_Init+0x90>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0310 	and.w	r3, r3, #16
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_GPIO_Init+0x90>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <MX_GPIO_Init+0x90>)
 8000456:	f043 0320 	orr.w	r3, r3, #32
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_GPIO_Init+0x90>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0320 	and.w	r3, r3, #32
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <MX_GPIO_Init+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <MX_GPIO_Init+0x90>)
 800046e:	f043 0304 	orr.w	r3, r3, #4
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_GPIO_Init+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0304 	and.w	r3, r3, #4
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <MX_GPIO_Init+0x94>)
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <MX_GPIO_Init+0x98>)
 8000496:	f001 fbab 	bl	8001bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	2028      	movs	r0, #40	; 0x28
 80004a0:	f001 f95f 	bl	8001762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004a4:	2028      	movs	r0, #40	; 0x28
 80004a6:	f001 f978 	bl	800179a <HAL_NVIC_EnableIRQ>

}
 80004aa:	bf00      	nop
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000
 80004b8:	10110000 	.word	0x10110000
 80004bc:	40011000 	.word	0x40011000

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <Error_Handler+0x8>
	...

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_MspInit+0x5c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x5c>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x60>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_MspInit+0x60>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a20      	ldr	r2, [pc, #128]	; (80005cc <HAL_CAN_MspInit+0x9c>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d139      	bne.n	80005c4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <HAL_CAN_MspInit+0xa0>)
 8000552:	69db      	ldr	r3, [r3, #28]
 8000554:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <HAL_CAN_MspInit+0xa0>)
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	61d3      	str	r3, [r2, #28]
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <HAL_CAN_MspInit+0xa0>)
 800055e:	69db      	ldr	r3, [r3, #28]
 8000560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <HAL_CAN_MspInit+0xa0>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <HAL_CAN_MspInit+0xa0>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <HAL_CAN_MspInit+0xa0>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	4619      	mov	r1, r3
 8000594:	480f      	ldr	r0, [pc, #60]	; (80005d4 <HAL_CAN_MspInit+0xa4>)
 8000596:	f001 fb2b 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a0:	2302      	movs	r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005a4:	2303      	movs	r3, #3
 80005a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4619      	mov	r1, r3
 80005ae:	4809      	ldr	r0, [pc, #36]	; (80005d4 <HAL_CAN_MspInit+0xa4>)
 80005b0:	f001 fb1e 	bl	8001bf0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2014      	movs	r0, #20
 80005ba:	f001 f8d2 	bl	8001762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80005be:	2014      	movs	r0, #20
 80005c0:	f001 f8eb 	bl	800179a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40006400 	.word	0x40006400
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010800 	.word	0x40010800

080005d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a46      	ldr	r2, [pc, #280]	; (800070c <HAL_UART_MspInit+0x134>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	f040 8084 	bne.w	8000702 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005fa:	4b45      	ldr	r3, [pc, #276]	; (8000710 <HAL_UART_MspInit+0x138>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a44      	ldr	r2, [pc, #272]	; (8000710 <HAL_UART_MspInit+0x138>)
 8000600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b42      	ldr	r3, [pc, #264]	; (8000710 <HAL_UART_MspInit+0x138>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <HAL_UART_MspInit+0x138>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	4a3e      	ldr	r2, [pc, #248]	; (8000710 <HAL_UART_MspInit+0x138>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	6193      	str	r3, [r2, #24]
 800061e:	4b3c      	ldr	r3, [pc, #240]	; (8000710 <HAL_UART_MspInit+0x138>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800062a:	2304      	movs	r3, #4
 800062c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	2302      	movs	r3, #2
 8000630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	4619      	mov	r1, r3
 800063c:	4835      	ldr	r0, [pc, #212]	; (8000714 <HAL_UART_MspInit+0x13c>)
 800063e:	f001 fad7 	bl	8001bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000642:	2308      	movs	r3, #8
 8000644:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	4619      	mov	r1, r3
 8000654:	482f      	ldr	r0, [pc, #188]	; (8000714 <HAL_UART_MspInit+0x13c>)
 8000656:	f001 facb 	bl	8001bf0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <HAL_UART_MspInit+0x140>)
 800065c:	4a2f      	ldr	r2, [pc, #188]	; (800071c <HAL_UART_MspInit+0x144>)
 800065e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <HAL_UART_MspInit+0x140>)
 8000662:	2200      	movs	r2, #0
 8000664:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000666:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <HAL_UART_MspInit+0x140>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <HAL_UART_MspInit+0x140>)
 800066e:	2280      	movs	r2, #128	; 0x80
 8000670:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <HAL_UART_MspInit+0x140>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <HAL_UART_MspInit+0x140>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <HAL_UART_MspInit+0x140>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <HAL_UART_MspInit+0x140>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800068a:	4823      	ldr	r0, [pc, #140]	; (8000718 <HAL_UART_MspInit+0x140>)
 800068c:	f001 f8a0 	bl	80017d0 <HAL_DMA_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8000696:	f7ff ff13 	bl	80004c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <HAL_UART_MspInit+0x140>)
 800069e:	639a      	str	r2, [r3, #56]	; 0x38
 80006a0:	4a1d      	ldr	r2, [pc, #116]	; (8000718 <HAL_UART_MspInit+0x140>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006a8:	4a1e      	ldr	r2, [pc, #120]	; (8000724 <HAL_UART_MspInit+0x14c>)
 80006aa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006ae:	2210      	movs	r2, #16
 80006b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80006d6:	4812      	ldr	r0, [pc, #72]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006d8:	f001 f87a 	bl	80017d0 <HAL_DMA_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80006e2:	f7ff feed 	bl	80004c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006ea:	635a      	str	r2, [r3, #52]	; 0x34
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <HAL_UART_MspInit+0x148>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2100      	movs	r1, #0
 80006f6:	2026      	movs	r0, #38	; 0x26
 80006f8:	f001 f833 	bl	8001762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006fc:	2026      	movs	r0, #38	; 0x26
 80006fe:	f001 f84c 	bl	800179a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40004400 	.word	0x40004400
 8000710:	40021000 	.word	0x40021000
 8000714:	40010800 	.word	0x40010800
 8000718:	20000094 	.word	0x20000094
 800071c:	4002006c 	.word	0x4002006c
 8000720:	200000d8 	.word	0x200000d8
 8000724:	40020080 	.word	0x40020080

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <MemManage_Handler+0x4>

0800073a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <UsageFault_Handler+0x4>

08000746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076e:	f000 f8a5 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <DMA1_Channel6_IRQHandler+0x10>)
 800077e:	f001 f931 	bl	80019e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000094 	.word	0x20000094

0800078c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <DMA1_Channel7_IRQHandler+0x10>)
 8000792:	f001 f927 	bl	80019e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000d8 	.word	0x200000d8

080007a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007a6:	f000 fce1 	bl	800116c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000028 	.word	0x20000028

080007b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <USART2_IRQHandler+0x10>)
 80007ba:	f002 f81d 	bl	80027f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000050 	.word	0x20000050

080007c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80007cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007d0:	f001 fb92 	bl	8001ef8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007e6:	490d      	ldr	r1, [pc, #52]	; (800081c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e8:	4a0d      	ldr	r2, [pc, #52]	; (8000820 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007fc:	4c0a      	ldr	r4, [pc, #40]	; (8000828 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800080a:	f7ff ffe5 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080e:	f002 fba1 	bl	8002f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fcfb 	bl	800020c <main>
  bx lr
 8000816:	4770      	bx	lr
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000820:	08002ff4 	.word	0x08002ff4
  ldr r2, =_sbss
 8000824:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000828:	2000016c 	.word	0x2000016c

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>
	...

08000830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_Init+0x28>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <HAL_Init+0x28>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 ff83 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	200f      	movs	r0, #15
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff fe3e 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 ff9b 	bl	80017b6 <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f000 ff63 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x1c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_IncTick+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a03      	ldr	r2, [pc, #12]	; (80008dc <HAL_IncTick+0x20>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000168 	.word	0x20000168

080008e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <HAL_GetTick+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000168 	.word	0x20000168

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff fff0 	bl	80008e0 <HAL_GetTick>
 8000900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_Delay+0x44>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800091a:	bf00      	nop
 800091c:	f7ff ffe0 	bl	80008e0 <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008

0800093c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e0ed      	b.n	8000b2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fde8 	bl	8000530 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f042 0201 	orr.w	r2, r2, #1
 800096e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000970:	f7ff ffb6 	bl	80008e0 <HAL_GetTick>
 8000974:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000976:	e012      	b.n	800099e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000978:	f7ff ffb2 	bl	80008e0 <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	2b0a      	cmp	r3, #10
 8000984:	d90b      	bls.n	800099e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800098a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2205      	movs	r2, #5
 8000996:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	e0c5      	b.n	8000b2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0e5      	beq.n	8000978 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f022 0202 	bic.w	r2, r2, #2
 80009ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009bc:	f7ff ff90 	bl	80008e0 <HAL_GetTick>
 80009c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009c2:	e012      	b.n	80009ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009c4:	f7ff ff8c 	bl	80008e0 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	2b0a      	cmp	r3, #10
 80009d0:	d90b      	bls.n	80009ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2205      	movs	r2, #5
 80009e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e09f      	b.n	8000b2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1e5      	bne.n	80009c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	7e1b      	ldrb	r3, [r3, #24]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d108      	bne.n	8000a12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	e007      	b.n	8000a22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7e5b      	ldrb	r3, [r3, #25]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d108      	bne.n	8000a3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e007      	b.n	8000a4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7e9b      	ldrb	r3, [r3, #26]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d108      	bne.n	8000a66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f042 0220 	orr.w	r2, r2, #32
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	e007      	b.n	8000a76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f022 0220 	bic.w	r2, r2, #32
 8000a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	7edb      	ldrb	r3, [r3, #27]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d108      	bne.n	8000a90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0210 	bic.w	r2, r2, #16
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	e007      	b.n	8000aa0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0210 	orr.w	r2, r2, #16
 8000a9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	7f1b      	ldrb	r3, [r3, #28]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d108      	bne.n	8000aba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f042 0208 	orr.w	r2, r2, #8
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	e007      	b.n	8000aca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 0208 	bic.w	r2, r2, #8
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	7f5b      	ldrb	r3, [r3, #29]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d108      	bne.n	8000ae4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f042 0204 	orr.w	r2, r2, #4
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	e007      	b.n	8000af4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f022 0204 	bic.w	r2, r2, #4
 8000af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	431a      	orrs	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	ea42 0103 	orr.w	r1, r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b087      	sub	sp, #28
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
 8000b3a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b48:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b4a:	7cfb      	ldrb	r3, [r7, #19]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d003      	beq.n	8000b58 <HAL_CAN_ConfigFilter+0x26>
 8000b50:	7cfb      	ldrb	r3, [r7, #19]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	f040 80aa 	bne.w	8000cac <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b5e:	f043 0201 	orr.w	r2, r3, #1
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	f003 031f 	and.w	r3, r3, #31
 8000b70:	2201      	movs	r2, #1
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	43db      	mvns	r3, r3
 8000b82:	401a      	ands	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d123      	bne.n	8000bda <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	401a      	ands	r2, r3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bb4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3248      	adds	r2, #72	; 0x48
 8000bba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bd0:	6979      	ldr	r1, [r7, #20]
 8000bd2:	3348      	adds	r3, #72	; 0x48
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	440b      	add	r3, r1
 8000bd8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d122      	bne.n	8000c28 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	431a      	orrs	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c02:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3248      	adds	r2, #72	; 0x48
 8000c08:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c1c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c1e:	6979      	ldr	r1, [r7, #20]
 8000c20:	3348      	adds	r3, #72	; 0x48
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	440b      	add	r3, r1
 8000c26:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d109      	bne.n	8000c44 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c42:	e007      	b.n	8000c54 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d109      	bne.n	8000c70 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	43db      	mvns	r3, r3
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c6e:	e007      	b.n	8000c80 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	6a1b      	ldr	r3, [r3, #32]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d107      	bne.n	8000c98 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	431a      	orrs	r2, r3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c9e:	f023 0201 	bic.w	r2, r3, #1
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	e006      	b.n	8000cba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
  }
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d12e      	bne.n	8000d36 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000cf0:	f7ff fdf6 	bl	80008e0 <HAL_GetTick>
 8000cf4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cf6:	e012      	b.n	8000d1e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf8:	f7ff fdf2 	bl	80008e0 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b0a      	cmp	r3, #10
 8000d04:	d90b      	bls.n	8000d1e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2205      	movs	r2, #5
 8000d16:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e012      	b.n	8000d44 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1e5      	bne.n	8000cf8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e006      	b.n	8000d44 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
  }
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d60:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d6a:	7ffb      	ldrb	r3, [r7, #31]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d003      	beq.n	8000d78 <HAL_CAN_AddTxMessage+0x2c>
 8000d70:	7ffb      	ldrb	r3, [r7, #31]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	f040 80b8 	bne.w	8000ee8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10a      	bne.n	8000d98 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f000 80a0 	beq.w	8000ed8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	0e1b      	lsrs	r3, r3, #24
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d907      	bls.n	8000db8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e09e      	b.n	8000ef6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000db8:	2201      	movs	r2, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	409a      	lsls	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10d      	bne.n	8000de6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	6809      	ldr	r1, [r1, #0]
 8000dd8:	431a      	orrs	r2, r3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3318      	adds	r3, #24
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	440b      	add	r3, r1
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	e00f      	b.n	8000e06 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000df0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000df6:	68f9      	ldr	r1, [r7, #12]
 8000df8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000dfa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3318      	adds	r3, #24
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	440b      	add	r3, r1
 8000e04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	691a      	ldr	r2, [r3, #16]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3318      	adds	r3, #24
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	440b      	add	r3, r1
 8000e16:	3304      	adds	r3, #4
 8000e18:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	7d1b      	ldrb	r3, [r3, #20]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d111      	bne.n	8000e46 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3318      	adds	r3, #24
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3304      	adds	r3, #4
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	6811      	ldr	r1, [r2, #0]
 8000e36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3318      	adds	r3, #24
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	440b      	add	r3, r1
 8000e42:	3304      	adds	r3, #4
 8000e44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3307      	adds	r3, #7
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	061a      	lsls	r2, r3, #24
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3306      	adds	r3, #6
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3305      	adds	r3, #5
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	4313      	orrs	r3, r2
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	3204      	adds	r2, #4
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	4610      	mov	r0, r2
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	6811      	ldr	r1, [r2, #0]
 8000e6e:	ea43 0200 	orr.w	r2, r3, r0
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	440b      	add	r3, r1
 8000e78:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000e7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3303      	adds	r3, #3
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	061a      	lsls	r2, r3, #24
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3302      	adds	r3, #2
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	041b      	lsls	r3, r3, #16
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3301      	adds	r3, #1
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	6811      	ldr	r1, [r2, #0]
 8000ea4:	ea43 0200 	orr.w	r2, r3, r0
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	440b      	add	r3, r1
 8000eae:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000eb2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	3318      	adds	r3, #24
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	4413      	add	r3, r2
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	6811      	ldr	r1, [r2, #0]
 8000ec6:	f043 0201 	orr.w	r2, r3, #1
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3318      	adds	r3, #24
 8000ece:	011b      	lsls	r3, r3, #4
 8000ed0:	440b      	add	r3, r1
 8000ed2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e00e      	b.n	8000ef6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e006      	b.n	8000ef6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
  }
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f00:	b480      	push	{r7}
 8000f02:	b087      	sub	sp, #28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f14:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d003      	beq.n	8000f24 <HAL_CAN_GetRxMessage+0x24>
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	f040 80f3 	bne.w	800110a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10e      	bne.n	8000f48 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d116      	bne.n	8000f66 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e0e7      	b.n	8001118 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d107      	bne.n	8000f66 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e0d8      	b.n	8001118 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	331b      	adds	r3, #27
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	4413      	add	r3, r2
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0204 	and.w	r2, r3, #4
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10c      	bne.n	8000f9e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	331b      	adds	r3, #27
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	4413      	add	r3, r2
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	0d5b      	lsrs	r3, r3, #21
 8000f94:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e00b      	b.n	8000fb6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	331b      	adds	r3, #27
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	4413      	add	r3, r2
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	331b      	adds	r3, #27
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	4413      	add	r3, r2
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0202 	and.w	r2, r3, #2
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	331b      	adds	r3, #27
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	4413      	add	r3, r2
 8000fd8:	3304      	adds	r3, #4
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 020f 	and.w	r2, r3, #15
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	331b      	adds	r3, #27
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	4413      	add	r3, r2
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	331b      	adds	r3, #27
 8001004:	011b      	lsls	r3, r3, #4
 8001006:	4413      	add	r3, r2
 8001008:	3304      	adds	r3, #4
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	4413      	add	r3, r2
 800101e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	4413      	add	r3, r2
 8001034:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	0a1a      	lsrs	r2, r3, #8
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	4413      	add	r3, r2
 800104e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0c1a      	lsrs	r2, r3, #16
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3302      	adds	r3, #2
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	4413      	add	r3, r2
 8001068:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	0e1a      	lsrs	r2, r3, #24
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3303      	adds	r3, #3
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	4413      	add	r3, r2
 8001082:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	3304      	adds	r3, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	011b      	lsls	r3, r3, #4
 8001098:	4413      	add	r3, r2
 800109a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0a1a      	lsrs	r2, r3, #8
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3305      	adds	r3, #5
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	4413      	add	r3, r2
 80010b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	0c1a      	lsrs	r2, r3, #16
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3306      	adds	r3, #6
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0e1a      	lsrs	r2, r3, #24
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3307      	adds	r3, #7
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d108      	bne.n	80010f6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0220 	orr.w	r2, r2, #32
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	e007      	b.n	8001106 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f042 0220 	orr.w	r2, r2, #32
 8001104:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e006      	b.n	8001118 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
  }
}
 8001118:	4618      	mov	r0, r3
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001132:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d002      	beq.n	8001140 <HAL_CAN_ActivateNotification+0x1e>
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d109      	bne.n	8001154 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6959      	ldr	r1, [r3, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	430a      	orrs	r2, r1
 800114e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	e006      	b.n	8001162 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
  }
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d07c      	beq.n	80012ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2201      	movs	r2, #1
 80011c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f983 	bl	80014da <HAL_CAN_TxMailbox0CompleteCallback>
 80011d4:	e016      	b.n	8001204 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
 80011e8:	e00c      	b.n	8001204 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	f003 0308 	and.w	r3, r3, #8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d004      	beq.n	80011fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
 80011fc:	e002      	b.n	8001204 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f986 	bl	8001510 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	2b00      	cmp	r3, #0
 800120c:	d024      	beq.n	8001258 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001216:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f962 	bl	80014ec <HAL_CAN_TxMailbox1CompleteCallback>
 8001228:	e016      	b.n	8001258 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
 800123c:	e00c      	b.n	8001258 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001244:	2b00      	cmp	r3, #0
 8001246:	d004      	beq.n	8001252 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
 8001250:	e002      	b.n	8001258 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 f965 	bl	8001522 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d024      	beq.n	80012ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800126a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f941 	bl	80014fe <HAL_CAN_TxMailbox2CompleteCallback>
 800127c:	e016      	b.n	80012ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
 8001290:	e00c      	b.n	80012ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
 80012a4:	e002      	b.n	80012ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f944 	bl	8001534 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00c      	beq.n	80012d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2210      	movs	r2, #16
 80012ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2208      	movs	r2, #8
 80012ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f92a 	bl	8001546 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d009      	beq.n	8001310 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7fe ff62 	bl	80001d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00c      	beq.n	8001334 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	f003 0310 	and.w	r3, r3, #16
 8001320:	2b00      	cmp	r3, #0
 8001322:	d007      	beq.n	8001334 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2210      	movs	r2, #16
 8001332:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	f003 0320 	and.w	r3, r3, #32
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d006      	beq.n	8001356 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2208      	movs	r2, #8
 800134e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 f90a 	bl	800156a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	2b00      	cmp	r3, #0
 800135e:	d009      	beq.n	8001374 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f8f2 	bl	8001558 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2210      	movs	r2, #16
 800138e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f8f3 	bl	800157c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00b      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2208      	movs	r2, #8
 80013b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f8eb 	bl	800158e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d07b      	beq.n	80014ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d072      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d008      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d008      	beq.n	8001404 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	f043 0302 	orr.w	r3, r3, #2
 8001402:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140a:	2b00      	cmp	r3, #0
 800140c:	d008      	beq.n	8001420 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001420:	6a3b      	ldr	r3, [r7, #32]
 8001422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001426:	2b00      	cmp	r3, #0
 8001428:	d043      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001430:	2b00      	cmp	r3, #0
 8001432:	d03e      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800143a:	2b60      	cmp	r3, #96	; 0x60
 800143c:	d02b      	beq.n	8001496 <HAL_CAN_IRQHandler+0x32a>
 800143e:	2b60      	cmp	r3, #96	; 0x60
 8001440:	d82e      	bhi.n	80014a0 <HAL_CAN_IRQHandler+0x334>
 8001442:	2b50      	cmp	r3, #80	; 0x50
 8001444:	d022      	beq.n	800148c <HAL_CAN_IRQHandler+0x320>
 8001446:	2b50      	cmp	r3, #80	; 0x50
 8001448:	d82a      	bhi.n	80014a0 <HAL_CAN_IRQHandler+0x334>
 800144a:	2b40      	cmp	r3, #64	; 0x40
 800144c:	d019      	beq.n	8001482 <HAL_CAN_IRQHandler+0x316>
 800144e:	2b40      	cmp	r3, #64	; 0x40
 8001450:	d826      	bhi.n	80014a0 <HAL_CAN_IRQHandler+0x334>
 8001452:	2b30      	cmp	r3, #48	; 0x30
 8001454:	d010      	beq.n	8001478 <HAL_CAN_IRQHandler+0x30c>
 8001456:	2b30      	cmp	r3, #48	; 0x30
 8001458:	d822      	bhi.n	80014a0 <HAL_CAN_IRQHandler+0x334>
 800145a:	2b10      	cmp	r3, #16
 800145c:	d002      	beq.n	8001464 <HAL_CAN_IRQHandler+0x2f8>
 800145e:	2b20      	cmp	r3, #32
 8001460:	d005      	beq.n	800146e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001462:	e01d      	b.n	80014a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800146c:	e019      	b.n	80014a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f043 0310 	orr.w	r3, r3, #16
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001476:	e014      	b.n	80014a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	f043 0320 	orr.w	r3, r3, #32
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001480:	e00f      	b.n	80014a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800148a:	e00a      	b.n	80014a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001494:	e005      	b.n	80014a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800149e:	e000      	b.n	80014a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80014a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80014b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2204      	movs	r2, #4
 80014b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d008      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f867 	bl	80015a0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	; 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d0:	4013      	ands	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x44>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <__NVIC_GetPriorityGrouping+0x18>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	f003 0307 	and.w	r3, r3, #7
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db0b      	blt.n	8001642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	f003 021f 	and.w	r2, r3, #31
 8001630:	4906      	ldr	r1, [pc, #24]	; (800164c <__NVIC_EnableIRQ+0x34>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	2001      	movs	r0, #1
 800163a:	fa00 f202 	lsl.w	r2, r0, r2
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100

08001650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	6039      	str	r1, [r7, #0]
 800165a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001660:	2b00      	cmp	r3, #0
 8001662:	db0a      	blt.n	800167a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	490c      	ldr	r1, [pc, #48]	; (800169c <__NVIC_SetPriority+0x4c>)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	0112      	lsls	r2, r2, #4
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	440b      	add	r3, r1
 8001674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001678:	e00a      	b.n	8001690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4908      	ldr	r1, [pc, #32]	; (80016a0 <__NVIC_SetPriority+0x50>)
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	3b04      	subs	r3, #4
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	440b      	add	r3, r1
 800168e:	761a      	strb	r2, [r3, #24]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b089      	sub	sp, #36	; 0x24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f1c3 0307 	rsb	r3, r3, #7
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf28      	it	cs
 80016c2:	2304      	movcs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3304      	adds	r3, #4
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d902      	bls.n	80016d4 <NVIC_EncodePriority+0x30>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3b03      	subs	r3, #3
 80016d2:	e000      	b.n	80016d6 <NVIC_EncodePriority+0x32>
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	401a      	ands	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	43d9      	mvns	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	4313      	orrs	r3, r2
         );
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f7ff ff90 	bl	8001650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff2d 	bl	80015b4 <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff42 	bl	80015fc <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff90 	bl	80016a4 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5f 	bl	8001650 <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff35 	bl	8001618 <__NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffa2 	bl	8001708 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e043      	b.n	800186e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b22      	ldr	r3, [pc, #136]	; (8001878 <HAL_DMA_Init+0xa8>)
 80017ee:	4413      	add	r3, r2
 80017f0:	4a22      	ldr	r2, [pc, #136]	; (800187c <HAL_DMA_Init+0xac>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	009a      	lsls	r2, r3, #2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a1f      	ldr	r2, [pc, #124]	; (8001880 <HAL_DMA_Init+0xb0>)
 8001802:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2202      	movs	r2, #2
 8001808:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800181a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800181e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	bffdfff8 	.word	0xbffdfff8
 800187c:	cccccccd 	.word	0xcccccccd
 8001880:	40020000 	.word	0x40020000

08001884 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800188c:	2300      	movs	r3, #0
 800188e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001896:	2b02      	cmp	r3, #2
 8001898:	d008      	beq.n	80018ac <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2204      	movs	r2, #4
 800189e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e020      	b.n	80018ee <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 020e 	bic.w	r2, r2, #14
 80018ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0201 	bic.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800190a:	2b02      	cmp	r3, #2
 800190c:	d005      	beq.n	800191a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2204      	movs	r2, #4
 8001912:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e051      	b.n	80019be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 020e 	bic.w	r2, r2, #14
 8001928:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_DMA_Abort_IT+0xd0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d029      	beq.n	8001998 <HAL_DMA_Abort_IT+0xa0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a20      	ldr	r2, [pc, #128]	; (80019cc <HAL_DMA_Abort_IT+0xd4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d022      	beq.n	8001994 <HAL_DMA_Abort_IT+0x9c>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a1f      	ldr	r2, [pc, #124]	; (80019d0 <HAL_DMA_Abort_IT+0xd8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d01a      	beq.n	800198e <HAL_DMA_Abort_IT+0x96>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_DMA_Abort_IT+0xdc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d012      	beq.n	8001988 <HAL_DMA_Abort_IT+0x90>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1c      	ldr	r2, [pc, #112]	; (80019d8 <HAL_DMA_Abort_IT+0xe0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00a      	beq.n	8001982 <HAL_DMA_Abort_IT+0x8a>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1a      	ldr	r2, [pc, #104]	; (80019dc <HAL_DMA_Abort_IT+0xe4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d102      	bne.n	800197c <HAL_DMA_Abort_IT+0x84>
 8001976:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800197a:	e00e      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 800197c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001980:	e00b      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 8001982:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001986:	e008      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 8001988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198c:	e005      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 800198e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001992:	e002      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 8001994:	2310      	movs	r3, #16
 8001996:	e000      	b.n	800199a <HAL_DMA_Abort_IT+0xa2>
 8001998:	2301      	movs	r3, #1
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <HAL_DMA_Abort_IT+0xe8>)
 800199c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
    } 
  }
  return status;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40020008 	.word	0x40020008
 80019cc:	4002001c 	.word	0x4002001c
 80019d0:	40020030 	.word	0x40020030
 80019d4:	40020044 	.word	0x40020044
 80019d8:	40020058 	.word	0x40020058
 80019dc:	4002006c 	.word	0x4002006c
 80019e0:	40020000 	.word	0x40020000

080019e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	2204      	movs	r2, #4
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d04f      	beq.n	8001aac <HAL_DMA_IRQHandler+0xc8>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d04a      	beq.n	8001aac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0204 	bic.w	r2, r2, #4
 8001a32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a66      	ldr	r2, [pc, #408]	; (8001bd4 <HAL_DMA_IRQHandler+0x1f0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d029      	beq.n	8001a92 <HAL_DMA_IRQHandler+0xae>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a65      	ldr	r2, [pc, #404]	; (8001bd8 <HAL_DMA_IRQHandler+0x1f4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d022      	beq.n	8001a8e <HAL_DMA_IRQHandler+0xaa>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a63      	ldr	r2, [pc, #396]	; (8001bdc <HAL_DMA_IRQHandler+0x1f8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d01a      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xa4>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a62      	ldr	r2, [pc, #392]	; (8001be0 <HAL_DMA_IRQHandler+0x1fc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d012      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x9e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a60      	ldr	r2, [pc, #384]	; (8001be4 <HAL_DMA_IRQHandler+0x200>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00a      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x98>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a5f      	ldr	r2, [pc, #380]	; (8001be8 <HAL_DMA_IRQHandler+0x204>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d102      	bne.n	8001a76 <HAL_DMA_IRQHandler+0x92>
 8001a70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a74:	e00e      	b.n	8001a94 <HAL_DMA_IRQHandler+0xb0>
 8001a76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a7a:	e00b      	b.n	8001a94 <HAL_DMA_IRQHandler+0xb0>
 8001a7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a80:	e008      	b.n	8001a94 <HAL_DMA_IRQHandler+0xb0>
 8001a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a86:	e005      	b.n	8001a94 <HAL_DMA_IRQHandler+0xb0>
 8001a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8c:	e002      	b.n	8001a94 <HAL_DMA_IRQHandler+0xb0>
 8001a8e:	2340      	movs	r3, #64	; 0x40
 8001a90:	e000      	b.n	8001a94 <HAL_DMA_IRQHandler+0xb0>
 8001a92:	2304      	movs	r3, #4
 8001a94:	4a55      	ldr	r2, [pc, #340]	; (8001bec <HAL_DMA_IRQHandler+0x208>)
 8001a96:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8094 	beq.w	8001bca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001aaa:	e08e      	b.n	8001bca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d056      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x186>
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d051      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0320 	and.w	r3, r3, #32
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10b      	bne.n	8001aec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 020a 	bic.w	r2, r2, #10
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a38      	ldr	r2, [pc, #224]	; (8001bd4 <HAL_DMA_IRQHandler+0x1f0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d029      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x166>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a37      	ldr	r2, [pc, #220]	; (8001bd8 <HAL_DMA_IRQHandler+0x1f4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d022      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x162>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a35      	ldr	r2, [pc, #212]	; (8001bdc <HAL_DMA_IRQHandler+0x1f8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d01a      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x15c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a34      	ldr	r2, [pc, #208]	; (8001be0 <HAL_DMA_IRQHandler+0x1fc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d012      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x156>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <HAL_DMA_IRQHandler+0x200>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00a      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x150>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a31      	ldr	r2, [pc, #196]	; (8001be8 <HAL_DMA_IRQHandler+0x204>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d102      	bne.n	8001b2e <HAL_DMA_IRQHandler+0x14a>
 8001b28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b2c:	e00e      	b.n	8001b4c <HAL_DMA_IRQHandler+0x168>
 8001b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b32:	e00b      	b.n	8001b4c <HAL_DMA_IRQHandler+0x168>
 8001b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b38:	e008      	b.n	8001b4c <HAL_DMA_IRQHandler+0x168>
 8001b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3e:	e005      	b.n	8001b4c <HAL_DMA_IRQHandler+0x168>
 8001b40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b44:	e002      	b.n	8001b4c <HAL_DMA_IRQHandler+0x168>
 8001b46:	2320      	movs	r3, #32
 8001b48:	e000      	b.n	8001b4c <HAL_DMA_IRQHandler+0x168>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	4a27      	ldr	r2, [pc, #156]	; (8001bec <HAL_DMA_IRQHandler+0x208>)
 8001b4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d034      	beq.n	8001bca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b68:	e02f      	b.n	8001bca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2208      	movs	r2, #8
 8001b70:	409a      	lsls	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d028      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x1e8>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d023      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 020e 	bic.w	r2, r2, #14
 8001b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
    }
  }
  return;
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
}
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40020008 	.word	0x40020008
 8001bd8:	4002001c 	.word	0x4002001c
 8001bdc:	40020030 	.word	0x40020030
 8001be0:	40020044 	.word	0x40020044
 8001be4:	40020058 	.word	0x40020058
 8001be8:	4002006c 	.word	0x4002006c
 8001bec:	40020000 	.word	0x40020000

08001bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b08b      	sub	sp, #44	; 0x2c
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	e169      	b.n	8001ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c04:	2201      	movs	r2, #1
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	f040 8158 	bne.w	8001ed2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4a9a      	ldr	r2, [pc, #616]	; (8001e90 <HAL_GPIO_Init+0x2a0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d05e      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c2c:	4a98      	ldr	r2, [pc, #608]	; (8001e90 <HAL_GPIO_Init+0x2a0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d875      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c32:	4a98      	ldr	r2, [pc, #608]	; (8001e94 <HAL_GPIO_Init+0x2a4>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d058      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c38:	4a96      	ldr	r2, [pc, #600]	; (8001e94 <HAL_GPIO_Init+0x2a4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d86f      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c3e:	4a96      	ldr	r2, [pc, #600]	; (8001e98 <HAL_GPIO_Init+0x2a8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d052      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c44:	4a94      	ldr	r2, [pc, #592]	; (8001e98 <HAL_GPIO_Init+0x2a8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d869      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c4a:	4a94      	ldr	r2, [pc, #592]	; (8001e9c <HAL_GPIO_Init+0x2ac>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d04c      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c50:	4a92      	ldr	r2, [pc, #584]	; (8001e9c <HAL_GPIO_Init+0x2ac>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d863      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c56:	4a92      	ldr	r2, [pc, #584]	; (8001ea0 <HAL_GPIO_Init+0x2b0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d046      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
 8001c5c:	4a90      	ldr	r2, [pc, #576]	; (8001ea0 <HAL_GPIO_Init+0x2b0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d85d      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d82a      	bhi.n	8001cbc <HAL_GPIO_Init+0xcc>
 8001c66:	2b12      	cmp	r3, #18
 8001c68:	d859      	bhi.n	8001d1e <HAL_GPIO_Init+0x12e>
 8001c6a:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <HAL_GPIO_Init+0x80>)
 8001c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c70:	08001ceb 	.word	0x08001ceb
 8001c74:	08001cc5 	.word	0x08001cc5
 8001c78:	08001cd7 	.word	0x08001cd7
 8001c7c:	08001d19 	.word	0x08001d19
 8001c80:	08001d1f 	.word	0x08001d1f
 8001c84:	08001d1f 	.word	0x08001d1f
 8001c88:	08001d1f 	.word	0x08001d1f
 8001c8c:	08001d1f 	.word	0x08001d1f
 8001c90:	08001d1f 	.word	0x08001d1f
 8001c94:	08001d1f 	.word	0x08001d1f
 8001c98:	08001d1f 	.word	0x08001d1f
 8001c9c:	08001d1f 	.word	0x08001d1f
 8001ca0:	08001d1f 	.word	0x08001d1f
 8001ca4:	08001d1f 	.word	0x08001d1f
 8001ca8:	08001d1f 	.word	0x08001d1f
 8001cac:	08001d1f 	.word	0x08001d1f
 8001cb0:	08001d1f 	.word	0x08001d1f
 8001cb4:	08001ccd 	.word	0x08001ccd
 8001cb8:	08001ce1 	.word	0x08001ce1
 8001cbc:	4a79      	ldr	r2, [pc, #484]	; (8001ea4 <HAL_GPIO_Init+0x2b4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cc2:	e02c      	b.n	8001d1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	623b      	str	r3, [r7, #32]
          break;
 8001cca:	e029      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e024      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	623b      	str	r3, [r7, #32]
          break;
 8001cde:	e01f      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	623b      	str	r3, [r7, #32]
          break;
 8001ce8:	e01a      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d102      	bne.n	8001cf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	623b      	str	r3, [r7, #32]
          break;
 8001cf6:	e013      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d00:	2308      	movs	r3, #8
 8001d02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	611a      	str	r2, [r3, #16]
          break;
 8001d0a:	e009      	b.n	8001d20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	615a      	str	r2, [r3, #20]
          break;
 8001d16:	e003      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
          break;
 8001d1c:	e000      	b.n	8001d20 <HAL_GPIO_Init+0x130>
          break;
 8001d1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2bff      	cmp	r3, #255	; 0xff
 8001d24:	d801      	bhi.n	8001d2a <HAL_GPIO_Init+0x13a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	e001      	b.n	8001d2e <HAL_GPIO_Init+0x13e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2bff      	cmp	r3, #255	; 0xff
 8001d34:	d802      	bhi.n	8001d3c <HAL_GPIO_Init+0x14c>
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	e002      	b.n	8001d42 <HAL_GPIO_Init+0x152>
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	3b08      	subs	r3, #8
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	210f      	movs	r1, #15
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	401a      	ands	r2, r3
 8001d54:	6a39      	ldr	r1, [r7, #32]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80b1 	beq.w	8001ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d70:	4b4d      	ldr	r3, [pc, #308]	; (8001ea8 <HAL_GPIO_Init+0x2b8>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <HAL_GPIO_Init+0x2b8>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b4a      	ldr	r3, [pc, #296]	; (8001ea8 <HAL_GPIO_Init+0x2b8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d88:	4a48      	ldr	r2, [pc, #288]	; (8001eac <HAL_GPIO_Init+0x2bc>)
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a40      	ldr	r2, [pc, #256]	; (8001eb0 <HAL_GPIO_Init+0x2c0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d013      	beq.n	8001ddc <HAL_GPIO_Init+0x1ec>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3f      	ldr	r2, [pc, #252]	; (8001eb4 <HAL_GPIO_Init+0x2c4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00d      	beq.n	8001dd8 <HAL_GPIO_Init+0x1e8>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3e      	ldr	r2, [pc, #248]	; (8001eb8 <HAL_GPIO_Init+0x2c8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d007      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a3d      	ldr	r2, [pc, #244]	; (8001ebc <HAL_GPIO_Init+0x2cc>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d101      	bne.n	8001dd0 <HAL_GPIO_Init+0x1e0>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e006      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	e004      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e002      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_GPIO_Init+0x1ee>
 8001ddc:	2300      	movs	r3, #0
 8001dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de0:	f002 0203 	and.w	r2, r2, #3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4093      	lsls	r3, r2
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dee:	492f      	ldr	r1, [pc, #188]	; (8001eac <HAL_GPIO_Init+0x2bc>)
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e08:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	492c      	ldr	r1, [pc, #176]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4928      	ldr	r1, [pc, #160]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	491e      	ldr	r1, [pc, #120]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	4918      	ldr	r1, [pc, #96]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	608b      	str	r3, [r1, #8]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4914      	ldr	r1, [pc, #80]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d021      	beq.n	8001ec4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <HAL_GPIO_Init+0x2d0>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
 8001e8c:	e021      	b.n	8001ed2 <HAL_GPIO_Init+0x2e2>
 8001e8e:	bf00      	nop
 8001e90:	10320000 	.word	0x10320000
 8001e94:	10310000 	.word	0x10310000
 8001e98:	10220000 	.word	0x10220000
 8001e9c:	10210000 	.word	0x10210000
 8001ea0:	10120000 	.word	0x10120000
 8001ea4:	10110000 	.word	0x10110000
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	40010800 	.word	0x40010800
 8001eb4:	40010c00 	.word	0x40010c00
 8001eb8:	40011000 	.word	0x40011000
 8001ebc:	40011400 	.word	0x40011400
 8001ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	4909      	ldr	r1, [pc, #36]	; (8001ef4 <HAL_GPIO_Init+0x304>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f47f ae8e 	bne.w	8001c04 <HAL_GPIO_Init+0x14>
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	372c      	adds	r7, #44	; 0x2c
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	40010400 	.word	0x40010400

08001ef8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d006      	beq.n	8001f1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f0e:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe f93a 	bl	8000190 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40010400 	.word	0x40010400

08001f28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e272      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8087 	beq.w	8002056 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f48:	4b92      	ldr	r3, [pc, #584]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 030c 	and.w	r3, r3, #12
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d00c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f54:	4b8f      	ldr	r3, [pc, #572]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d112      	bne.n	8001f86 <HAL_RCC_OscConfig+0x5e>
 8001f60:	4b8c      	ldr	r3, [pc, #560]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d10b      	bne.n	8001f86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d06c      	beq.n	8002054 <HAL_RCC_OscConfig+0x12c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d168      	bne.n	8002054 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e24c      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x76>
 8001f90:	4b80      	ldr	r3, [pc, #512]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a7f      	ldr	r2, [pc, #508]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e02e      	b.n	8001ffc <HAL_RCC_OscConfig+0xd4>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x98>
 8001fa6:	4b7b      	ldr	r3, [pc, #492]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a7a      	ldr	r2, [pc, #488]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b78      	ldr	r3, [pc, #480]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a77      	ldr	r2, [pc, #476]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e01d      	b.n	8001ffc <HAL_RCC_OscConfig+0xd4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xbc>
 8001fca:	4b72      	ldr	r3, [pc, #456]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a71      	ldr	r2, [pc, #452]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6e      	ldr	r2, [pc, #440]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0xd4>
 8001fe4:	4b6b      	ldr	r3, [pc, #428]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a6a      	ldr	r2, [pc, #424]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a67      	ldr	r2, [pc, #412]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe fc6c 	bl	80008e0 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800200c:	f7fe fc68 	bl	80008e0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e200      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b5d      	ldr	r3, [pc, #372]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xe4>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe fc58 	bl	80008e0 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7fe fc54 	bl	80008e0 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1ec      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	4b53      	ldr	r3, [pc, #332]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x10c>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d063      	beq.n	800212a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002062:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800206e:	4b49      	ldr	r3, [pc, #292]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b08      	cmp	r3, #8
 8002078:	d11c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x18c>
 800207a:	4b46      	ldr	r3, [pc, #280]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_RCC_OscConfig+0x176>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e1c0      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4939      	ldr	r1, [pc, #228]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	e03a      	b.n	800212a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c2:	f7fe fc0d 	bl	80008e0 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ca:	f7fe fc09 	bl	80008e0 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e1a1      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4927      	ldr	r1, [pc, #156]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fe:	4b26      	ldr	r3, [pc, #152]	; (8002198 <HAL_RCC_OscConfig+0x270>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe fbec 	bl	80008e0 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210c:	f7fe fbe8 	bl	80008e0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e180      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d03a      	beq.n	80021ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d019      	beq.n	8002172 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213e:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_RCC_OscConfig+0x274>)
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002144:	f7fe fbcc 	bl	80008e0 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800214c:	f7fe fbc8 	bl	80008e0 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e160      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_RCC_OscConfig+0x26c>)
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800216a:	2001      	movs	r0, #1
 800216c:	f000 fad8 	bl	8002720 <RCC_Delay>
 8002170:	e01c      	b.n	80021ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_RCC_OscConfig+0x274>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7fe fbb2 	bl	80008e0 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217e:	e00f      	b.n	80021a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002180:	f7fe fbae 	bl	80008e0 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d908      	bls.n	80021a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e146      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
 8002192:	bf00      	nop
 8002194:	40021000 	.word	0x40021000
 8002198:	42420000 	.word	0x42420000
 800219c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	4b92      	ldr	r3, [pc, #584]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e9      	bne.n	8002180 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 80a6 	beq.w	8002306 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021be:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10d      	bne.n	80021e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4b88      	ldr	r3, [pc, #544]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a87      	ldr	r2, [pc, #540]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]
 80021d6:	4b85      	ldr	r3, [pc, #532]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b82      	ldr	r3, [pc, #520]	; (80023f0 <HAL_RCC_OscConfig+0x4c8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d118      	bne.n	8002224 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x4c8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a7e      	ldr	r2, [pc, #504]	; (80023f0 <HAL_RCC_OscConfig+0x4c8>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fe:	f7fe fb6f 	bl	80008e0 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7fe fb6b 	bl	80008e0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b64      	cmp	r3, #100	; 0x64
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e103      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	4b75      	ldr	r3, [pc, #468]	; (80023f0 <HAL_RCC_OscConfig+0x4c8>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x312>
 800222c:	4b6f      	ldr	r3, [pc, #444]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4a6e      	ldr	r2, [pc, #440]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6213      	str	r3, [r2, #32]
 8002238:	e02d      	b.n	8002296 <HAL_RCC_OscConfig+0x36e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x334>
 8002242:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a69      	ldr	r2, [pc, #420]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6213      	str	r3, [r2, #32]
 800224e:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a66      	ldr	r2, [pc, #408]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	6213      	str	r3, [r2, #32]
 800225a:	e01c      	b.n	8002296 <HAL_RCC_OscConfig+0x36e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x356>
 8002264:	4b61      	ldr	r3, [pc, #388]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4a60      	ldr	r2, [pc, #384]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6213      	str	r3, [r2, #32]
 8002270:	4b5e      	ldr	r3, [pc, #376]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a5d      	ldr	r2, [pc, #372]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e00b      	b.n	8002296 <HAL_RCC_OscConfig+0x36e>
 800227e:	4b5b      	ldr	r3, [pc, #364]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a5a      	ldr	r2, [pc, #360]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	4b58      	ldr	r3, [pc, #352]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a57      	ldr	r2, [pc, #348]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d015      	beq.n	80022ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229e:	f7fe fb1f 	bl	80008e0 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a6:	f7fe fb1b 	bl	80008e0 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e0b1      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0ee      	beq.n	80022a6 <HAL_RCC_OscConfig+0x37e>
 80022c8:	e014      	b.n	80022f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ca:	f7fe fb09 	bl	80008e0 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fb05 	bl	80008e0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e09b      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	4b40      	ldr	r3, [pc, #256]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1ee      	bne.n	80022d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fa:	4b3c      	ldr	r3, [pc, #240]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	4a3b      	ldr	r2, [pc, #236]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002304:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8087 	beq.w	800241e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002310:	4b36      	ldr	r3, [pc, #216]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d061      	beq.n	80023e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d146      	bne.n	80023b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002324:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <HAL_RCC_OscConfig+0x4cc>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fad9 	bl	80008e0 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002332:	f7fe fad5 	bl	80008e0 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e06d      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002344:	4b29      	ldr	r3, [pc, #164]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f0      	bne.n	8002332 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d108      	bne.n	800236c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	4921      	ldr	r1, [pc, #132]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236c:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a19      	ldr	r1, [r3, #32]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	430b      	orrs	r3, r1
 800237e:	491b      	ldr	r1, [pc, #108]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_RCC_OscConfig+0x4cc>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7fe faa9 	bl	80008e0 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe faa5 	bl	80008e0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e03d      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x46a>
 80023b0:	e035      	b.n	800241e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_RCC_OscConfig+0x4cc>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe fa92 	bl	80008e0 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fa8e 	bl	80008e0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e026      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x498>
 80023de:	e01e      	b.n	800241e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d107      	bne.n	80023f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e019      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
 80023f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_OscConfig+0x500>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	429a      	cmp	r2, r3
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000

0800242c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0d0      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b6a      	ldr	r3, [pc, #424]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d910      	bls.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 0207 	bic.w	r2, r3, #7
 8002456:	4965      	ldr	r1, [pc, #404]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0b8      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002492:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	494d      	ldr	r1, [pc, #308]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d040      	beq.n	800254c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d115      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e073      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06b      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4936      	ldr	r1, [pc, #216]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7fe f9e0 	bl	80008e0 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe f9dc 	bl	80008e0 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e053      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d210      	bcs.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	4922      	ldr	r1, [pc, #136]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e032      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4916      	ldr	r1, [pc, #88]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	490e      	ldr	r1, [pc, #56]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ba:	f000 f821 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025be:	4602      	mov	r2, r0
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	490a      	ldr	r1, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	5ccb      	ldrb	r3, [r1, r3]
 80025ce:	fa22 f303 	lsr.w	r3, r2, r3
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1cc>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1d0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe f93e 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08002fd4 	.word	0x08002fd4
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004

08002600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b490      	push	{r4, r7}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002606:	4b29      	ldr	r3, [pc, #164]	; (80026ac <HAL_RCC_GetSysClockFreq+0xac>)
 8002608:	1d3c      	adds	r4, r7, #4
 800260a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800260c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002610:	f240 2301 	movw	r3, #513	; 0x201
 8002614:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b04      	cmp	r3, #4
 8002638:	d002      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x40>
 800263a:	2b08      	cmp	r3, #8
 800263c:	d003      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x46>
 800263e:	e02b      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002642:	623b      	str	r3, [r7, #32]
      break;
 8002644:	e02b      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	0c9b      	lsrs	r3, r3, #18
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	3328      	adds	r3, #40	; 0x28
 8002650:	443b      	add	r3, r7
 8002652:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002656:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d012      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002662:	4b13      	ldr	r3, [pc, #76]	; (80026b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0c5b      	lsrs	r3, r3, #17
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	3328      	adds	r3, #40	; 0x28
 800266e:	443b      	add	r3, r7
 8002670:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002674:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800267a:	fb03 f202 	mul.w	r2, r3, r2
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
 8002686:	e004      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800268c:	fb02 f303 	mul.w	r3, r2, r3
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	623b      	str	r3, [r7, #32]
      break;
 8002696:	e002      	b.n	800269e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800269a:	623b      	str	r3, [r7, #32]
      break;
 800269c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800269e:	6a3b      	ldr	r3, [r7, #32]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc90      	pop	{r4, r7}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	08002fc4 	.word	0x08002fc4
 80026b0:	40021000 	.word	0x40021000
 80026b4:	007a1200 	.word	0x007a1200
 80026b8:	003d0900 	.word	0x003d0900

080026bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c0:	4b02      	ldr	r3, [pc, #8]	; (80026cc <HAL_RCC_GetHCLKFreq+0x10>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	20000000 	.word	0x20000000

080026d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d4:	f7ff fff2 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08002fe4 	.word	0x08002fe4

080026f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026fc:	f7ff ffde 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	0adb      	lsrs	r3, r3, #11
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4903      	ldr	r1, [pc, #12]	; (800271c <HAL_RCC_GetPCLK2Freq+0x24>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	08002fe4 	.word	0x08002fe4

08002720 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <RCC_Delay+0x34>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <RCC_Delay+0x38>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0a5b      	lsrs	r3, r3, #9
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800273c:	bf00      	nop
  }
  while (Delay --);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	60fa      	str	r2, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f9      	bne.n	800273c <RCC_Delay+0x1c>
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	20000000 	.word	0x20000000
 8002758:	10624dd3 	.word	0x10624dd3

0800275c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e03f      	b.n	80027ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fd ff28 	bl	80005d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2224      	movs	r2, #36	; 0x24
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800279e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fb49 	bl	8002e38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10d      	bne.n	800284a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_UART_IRQHandler+0x52>
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fa4f 	bl	8002ce6 <UART_Receive_IT>
      return;
 8002848:	e17b      	b.n	8002b42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80b1 	beq.w	80029b4 <HAL_UART_IRQHandler+0x1bc>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_UART_IRQHandler+0x70>
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80a6 	beq.w	80029b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_UART_IRQHandler+0x90>
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_UART_IRQHandler+0xb0>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	f043 0202 	orr.w	r2, r3, #2
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_UART_IRQHandler+0xd0>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0204 	orr.w	r2, r3, #4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00f      	beq.n	80028f2 <HAL_UART_IRQHandler+0xfa>
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d104      	bne.n	80028e6 <HAL_UART_IRQHandler+0xee>
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f043 0208 	orr.w	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 811e 	beq.w	8002b38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <HAL_UART_IRQHandler+0x11e>
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f9e8 	bl	8002ce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <HAL_UART_IRQHandler+0x146>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d031      	beq.n	80029a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f92a 	bl	8002b98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d023      	beq.n	800299a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002960:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002966:	2b00      	cmp	r3, #0
 8002968:	d013      	beq.n	8002992 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296e:	4a76      	ldr	r2, [pc, #472]	; (8002b48 <HAL_UART_IRQHandler+0x350>)
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe ffbe 	bl	80018f8 <HAL_DMA_Abort_IT>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d016      	beq.n	80029b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800298c:	4610      	mov	r0, r2
 800298e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002990:	e00e      	b.n	80029b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8ec 	bl	8002b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002998:	e00a      	b.n	80029b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8e8 	bl	8002b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a0:	e006      	b.n	80029b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8e4 	bl	8002b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029ae:	e0c3      	b.n	8002b38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b0:	bf00      	nop
    return;
 80029b2:	e0c1      	b.n	8002b38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	f040 80a1 	bne.w	8002b00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	f003 0310 	and.w	r3, r3, #16
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 809b 	beq.w	8002b00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8095 	beq.w	8002b00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d04e      	beq.n	8002a98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002a04:	8a3b      	ldrh	r3, [r7, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8098 	beq.w	8002b3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a10:	8a3a      	ldrh	r2, [r7, #16]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	f080 8092 	bcs.w	8002b3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8a3a      	ldrh	r2, [r7, #16]
 8002a1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d02b      	beq.n	8002a80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695a      	ldr	r2, [r3, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0210 	bic.w	r2, r2, #16
 8002a74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe ff02 	bl	8001884 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f876 	bl	8002b82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002a96:	e051      	b.n	8002b3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d047      	beq.n	8002b40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002ab0:	8a7b      	ldrh	r3, [r7, #18]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d044      	beq.n	8002b40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ac4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695a      	ldr	r2, [r3, #20]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0201 	bic.w	r2, r2, #1
 8002ad4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0210 	bic.w	r2, r2, #16
 8002af2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002af4:	8a7b      	ldrh	r3, [r7, #18]
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f842 	bl	8002b82 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002afe:	e01f      	b.n	8002b40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_UART_IRQHandler+0x324>
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f87f 	bl	8002c18 <UART_Transmit_IT>
    return;
 8002b1a:	e012      	b.n	8002b42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_UART_IRQHandler+0x34a>
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f8c0 	bl	8002cb6 <UART_EndTransmit_IT>
    return;
 8002b36:	e004      	b.n	8002b42 <HAL_UART_IRQHandler+0x34a>
    return;
 8002b38:	bf00      	nop
 8002b3a:	e002      	b.n	8002b42 <HAL_UART_IRQHandler+0x34a>
      return;
 8002b3c:	bf00      	nop
 8002b3e:	e000      	b.n	8002b42 <HAL_UART_IRQHandler+0x34a>
      return;
 8002b40:	bf00      	nop
  }
}
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	08002bf1 	.word	0x08002bf1

08002b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d107      	bne.n	8002bd8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0210 	bic.w	r2, r2, #16
 8002bd6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f7ff ffb0 	bl	8002b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b21      	cmp	r3, #33	; 0x21
 8002c2a:	d13e      	bne.n	8002caa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c34:	d114      	bne.n	8002c60 <UART_Transmit_IT+0x48>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d110      	bne.n	8002c60 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	1c9a      	adds	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	621a      	str	r2, [r3, #32]
 8002c5e:	e008      	b.n	8002c72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	1c59      	adds	r1, r3, #1
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6211      	str	r1, [r2, #32]
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e000      	b.n	8002cac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002caa:	2302      	movs	r3, #2
  }
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7ff ff38 	bl	8002b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b22      	cmp	r3, #34	; 0x22
 8002cf8:	f040 8099 	bne.w	8002e2e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d04:	d117      	bne.n	8002d36 <UART_Receive_IT+0x50>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d113      	bne.n	8002d36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	1c9a      	adds	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
 8002d34:	e026      	b.n	8002d84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d48:	d007      	beq.n	8002d5a <UART_Receive_IT+0x74>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10a      	bne.n	8002d68 <UART_Receive_IT+0x82>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e008      	b.n	8002d7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4619      	mov	r1, r3
 8002d92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d148      	bne.n	8002e2a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0220 	bic.w	r2, r2, #32
 8002da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695a      	ldr	r2, [r3, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d123      	bne.n	8002e20 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0210 	bic.w	r2, r2, #16
 8002dec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b10      	cmp	r3, #16
 8002dfa:	d10a      	bne.n	8002e12 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e16:	4619      	mov	r1, r3
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff feb2 	bl	8002b82 <HAL_UARTEx_RxEventCallback>
 8002e1e:	e002      	b.n	8002e26 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fe9c 	bl	8002b5e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e002      	b.n	8002e30 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e72:	f023 030c 	bic.w	r3, r3, #12
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <UART_SetConfig+0x114>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d103      	bne.n	8002ea8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ea0:	f7ff fc2a 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	e002      	b.n	8002eae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f7ff fc12 	bl	80026d0 <HAL_RCC_GetPCLK1Freq>
 8002eac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	009a      	lsls	r2, r3, #2
 8002eb8:	441a      	add	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <UART_SetConfig+0x118>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	095b      	lsrs	r3, r3, #5
 8002ecc:	0119      	lsls	r1, r3, #4
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009a      	lsls	r2, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <UART_SetConfig+0x118>)
 8002ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2064      	movs	r0, #100	; 0x64
 8002eee:	fb00 f303 	mul.w	r3, r0, r3
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	3332      	adds	r3, #50	; 0x32
 8002ef8:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <UART_SetConfig+0x118>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f04:	4419      	add	r1, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009a      	lsls	r2, r3, #2
 8002f10:	441a      	add	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <UART_SetConfig+0x118>)
 8002f1e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	2064      	movs	r0, #100	; 0x64
 8002f26:	fb00 f303 	mul.w	r3, r0, r3
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	3332      	adds	r3, #50	; 0x32
 8002f30:	4a07      	ldr	r2, [pc, #28]	; (8002f50 <UART_SetConfig+0x118>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	f003 020f 	and.w	r2, r3, #15
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	440a      	add	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40013800 	.word	0x40013800
 8002f50:	51eb851f 	.word	0x51eb851f

08002f54 <__libc_init_array>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	2600      	movs	r6, #0
 8002f58:	4d0c      	ldr	r5, [pc, #48]	; (8002f8c <__libc_init_array+0x38>)
 8002f5a:	4c0d      	ldr	r4, [pc, #52]	; (8002f90 <__libc_init_array+0x3c>)
 8002f5c:	1b64      	subs	r4, r4, r5
 8002f5e:	10a4      	asrs	r4, r4, #2
 8002f60:	42a6      	cmp	r6, r4
 8002f62:	d109      	bne.n	8002f78 <__libc_init_array+0x24>
 8002f64:	f000 f822 	bl	8002fac <_init>
 8002f68:	2600      	movs	r6, #0
 8002f6a:	4d0a      	ldr	r5, [pc, #40]	; (8002f94 <__libc_init_array+0x40>)
 8002f6c:	4c0a      	ldr	r4, [pc, #40]	; (8002f98 <__libc_init_array+0x44>)
 8002f6e:	1b64      	subs	r4, r4, r5
 8002f70:	10a4      	asrs	r4, r4, #2
 8002f72:	42a6      	cmp	r6, r4
 8002f74:	d105      	bne.n	8002f82 <__libc_init_array+0x2e>
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
 8002f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7c:	4798      	blx	r3
 8002f7e:	3601      	adds	r6, #1
 8002f80:	e7ee      	b.n	8002f60 <__libc_init_array+0xc>
 8002f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f86:	4798      	blx	r3
 8002f88:	3601      	adds	r6, #1
 8002f8a:	e7f2      	b.n	8002f72 <__libc_init_array+0x1e>
 8002f8c:	08002fec 	.word	0x08002fec
 8002f90:	08002fec 	.word	0x08002fec
 8002f94:	08002fec 	.word	0x08002fec
 8002f98:	08002ff0 	.word	0x08002ff0

08002f9c <memset>:
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4402      	add	r2, r0
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <memset+0xa>
 8002fa4:	4770      	bx	lr
 8002fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002faa:	e7f9      	b.n	8002fa0 <memset+0x4>

08002fac <_init>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	bf00      	nop
 8002fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb2:	bc08      	pop	{r3}
 8002fb4:	469e      	mov	lr, r3
 8002fb6:	4770      	bx	lr

08002fb8 <_fini>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr
