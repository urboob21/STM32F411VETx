
CAN_simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003898  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b0c  08003b0c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b0c  08003b0c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b0c  08003b0c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08003b84  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003b84  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000586e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158c  00000000  00000000  00025907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00026e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000558  00000000  00000000  000274a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014304  00000000  00000000  00027a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000641b  00000000  00000000  0003bd04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c06e  00000000  00000000  0004211f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ae18d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002154  00000000  00000000  000ae1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800398c 	.word	0x0800398c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800398c 	.word	0x0800398c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <HAL_Init+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a07      	ldr	r2, [pc, #28]	; (8000670 <HAL_Init+0x28>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 ff5d 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800065e:	2000      	movs	r0, #0
 8000660:	f000 f808 	bl	8000674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000664:	f001 ff3a 	bl	80024dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000668:	2300      	movs	r3, #0
}
 800066a:	4618      	mov	r0, r3
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40022000 	.word	0x40022000

08000674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_InitTick+0x54>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_InitTick+0x58>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	fbb3 f3f1 	udiv	r3, r3, r1
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 ff75 	bl	8001582 <HAL_SYSTICK_Config>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e00e      	b.n	80006c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d80a      	bhi.n	80006be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a8:	2200      	movs	r2, #0
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f000 ff3d 	bl	800152e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_InitTick+0x5c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e000      	b.n	80006c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000004 	.word	0x20000004
 80006d0:	20000000 	.word	0x20000000

080006d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_IncTick+0x1c>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_IncTick+0x20>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	4a03      	ldr	r2, [pc, #12]	; (80006f4 <HAL_IncTick+0x20>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	20000004 	.word	0x20000004
 80006f4:	2000008c 	.word	0x2000008c

080006f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return uwTick;
 80006fc:	4b02      	ldr	r3, [pc, #8]	; (8000708 <HAL_GetTick+0x10>)
 80006fe:	681b      	ldr	r3, [r3, #0]
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	2000008c 	.word	0x2000008c

0800070c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000714:	f7ff fff0 	bl	80006f8 <HAL_GetTick>
 8000718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000724:	d005      	beq.n	8000732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_Delay+0x44>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000732:	bf00      	nop
 8000734:	f7ff ffe0 	bl	80006f8 <HAL_GetTick>
 8000738:	4602      	mov	r2, r0
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	429a      	cmp	r2, r3
 8000742:	d8f7      	bhi.n	8000734 <HAL_Delay+0x28>
  {
  }
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d101      	bne.n	8000766 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	e0ed      	b.n	8000942 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f893 3020 	ldrb.w	r3, [r3, #32]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f001 fee4 	bl	8002540 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f022 0202 	bic.w	r2, r2, #2
 8000786:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000788:	f7ff ffb6 	bl	80006f8 <HAL_GetTick>
 800078c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800078e:	e012      	b.n	80007b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000790:	f7ff ffb2 	bl	80006f8 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	2b0a      	cmp	r3, #10
 800079c:	d90b      	bls.n	80007b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2205      	movs	r2, #5
 80007ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
 80007b4:	e0c5      	b.n	8000942 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f003 0302 	and.w	r3, r3, #2
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1e5      	bne.n	8000790 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f042 0201 	orr.w	r2, r2, #1
 80007d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007d4:	f7ff ff90 	bl	80006f8 <HAL_GetTick>
 80007d8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007da:	e012      	b.n	8000802 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007dc:	f7ff ff8c 	bl	80006f8 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	2b0a      	cmp	r3, #10
 80007e8:	d90b      	bls.n	8000802 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2205      	movs	r2, #5
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e09f      	b.n	8000942 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0e5      	beq.n	80007dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7e1b      	ldrb	r3, [r3, #24]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d108      	bne.n	800082a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	e007      	b.n	800083a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7e5b      	ldrb	r3, [r3, #25]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d108      	bne.n	8000854 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	e007      	b.n	8000864 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000862:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7e9b      	ldrb	r3, [r3, #26]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d108      	bne.n	800087e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0220 	orr.w	r2, r2, #32
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	e007      	b.n	800088e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f022 0220 	bic.w	r2, r2, #32
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7edb      	ldrb	r3, [r3, #27]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d108      	bne.n	80008a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f022 0210 	bic.w	r2, r2, #16
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e007      	b.n	80008b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 0210 	orr.w	r2, r2, #16
 80008b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7f1b      	ldrb	r3, [r3, #28]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d108      	bne.n	80008d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f042 0208 	orr.w	r2, r2, #8
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	e007      	b.n	80008e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f022 0208 	bic.w	r2, r2, #8
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7f5b      	ldrb	r3, [r3, #29]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d108      	bne.n	80008fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f042 0204 	orr.w	r2, r2, #4
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	e007      	b.n	800090c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f022 0204 	bic.w	r2, r2, #4
 800090a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	431a      	orrs	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	431a      	orrs	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	ea42 0103 	orr.w	r1, r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	430a      	orrs	r2, r1
 8000930:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2201      	movs	r2, #1
 800093c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800094a:	b480      	push	{r7}
 800094c:	b087      	sub	sp, #28
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000960:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000962:	7cfb      	ldrb	r3, [r7, #19]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d003      	beq.n	8000970 <HAL_CAN_ConfigFilter+0x26>
 8000968:	7cfb      	ldrb	r3, [r7, #19]
 800096a:	2b02      	cmp	r3, #2
 800096c:	f040 80aa 	bne.w	8000ac4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000976:	f043 0201 	orr.w	r2, r3, #1
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	f003 031f 	and.w	r3, r3, #31
 8000988:	2201      	movs	r2, #1
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	43db      	mvns	r3, r3
 800099a:	401a      	ands	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d123      	bne.n	80009f2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3248      	adds	r2, #72	; 0x48
 80009d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009e8:	6979      	ldr	r1, [r7, #20]
 80009ea:	3348      	adds	r3, #72	; 0x48
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	440b      	add	r3, r1
 80009f0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d122      	bne.n	8000a40 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	431a      	orrs	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a16:	683a      	ldr	r2, [r7, #0]
 8000a18:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a1a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3248      	adds	r2, #72	; 0x48
 8000a20:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a34:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a36:	6979      	ldr	r1, [r7, #20]
 8000a38:	3348      	adds	r3, #72	; 0x48
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	440b      	add	r3, r1
 8000a3e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d109      	bne.n	8000a5c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a5a:	e007      	b.n	8000a6c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	431a      	orrs	r2, r3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d109      	bne.n	8000a88 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a86:	e007      	b.n	8000a98 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	431a      	orrs	r2, r3
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	6a1b      	ldr	r3, [r3, #32]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d107      	bne.n	8000ab0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ab6:	f023 0201 	bic.w	r2, r3, #1
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	e006      	b.n	8000ad2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
  }
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	371c      	adds	r7, #28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d12e      	bne.n	8000b4e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2202      	movs	r2, #2
 8000af4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f022 0201 	bic.w	r2, r2, #1
 8000b06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b08:	f7ff fdf6 	bl	80006f8 <HAL_GetTick>
 8000b0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b0e:	e012      	b.n	8000b36 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b10:	f7ff fdf2 	bl	80006f8 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	2b0a      	cmp	r3, #10
 8000b1c:	d90b      	bls.n	8000b36 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2205      	movs	r2, #5
 8000b2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e012      	b.n	8000b5c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1e5      	bne.n	8000b10 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e006      	b.n	8000b5c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
  }
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b78:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b82:	7ffb      	ldrb	r3, [r7, #31]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d003      	beq.n	8000b90 <HAL_CAN_AddTxMessage+0x2c>
 8000b88:	7ffb      	ldrb	r3, [r7, #31]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	f040 80b8 	bne.w	8000d00 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10a      	bne.n	8000bb0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d105      	bne.n	8000bb0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 80a0 	beq.w	8000cf0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	0e1b      	lsrs	r3, r3, #24
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d907      	bls.n	8000bd0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e09e      	b.n	8000d0e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10d      	bne.n	8000bfe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bec:	68f9      	ldr	r1, [r7, #12]
 8000bee:	6809      	ldr	r1, [r1, #0]
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3318      	adds	r3, #24
 8000bf6:	011b      	lsls	r3, r3, #4
 8000bf8:	440b      	add	r3, r1
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	e00f      	b.n	8000c1e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c08:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c0e:	68f9      	ldr	r1, [r7, #12]
 8000c10:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c12:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3318      	adds	r3, #24
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	440b      	add	r3, r1
 8000c1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	6819      	ldr	r1, [r3, #0]
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	691a      	ldr	r2, [r3, #16]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3318      	adds	r3, #24
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	440b      	add	r3, r1
 8000c2e:	3304      	adds	r3, #4
 8000c30:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	7d1b      	ldrb	r3, [r3, #20]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d111      	bne.n	8000c5e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3318      	adds	r3, #24
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	4413      	add	r3, r2
 8000c46:	3304      	adds	r3, #4
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	6811      	ldr	r1, [r2, #0]
 8000c4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3318      	adds	r3, #24
 8000c56:	011b      	lsls	r3, r3, #4
 8000c58:	440b      	add	r3, r1
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3307      	adds	r3, #7
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	061a      	lsls	r2, r3, #24
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	3306      	adds	r3, #6
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	041b      	lsls	r3, r3, #16
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3305      	adds	r3, #5
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	3204      	adds	r2, #4
 8000c7e:	7812      	ldrb	r2, [r2, #0]
 8000c80:	4610      	mov	r0, r2
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	6811      	ldr	r1, [r2, #0]
 8000c86:	ea43 0200 	orr.w	r2, r3, r0
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	440b      	add	r3, r1
 8000c90:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	3303      	adds	r3, #3
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	061a      	lsls	r2, r3, #24
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3301      	adds	r3, #1
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	6811      	ldr	r1, [r2, #0]
 8000cbc:	ea43 0200 	orr.w	r2, r3, r0
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	011b      	lsls	r3, r3, #4
 8000cc4:	440b      	add	r3, r1
 8000cc6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000cca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3318      	adds	r3, #24
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	4413      	add	r3, r2
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	6811      	ldr	r1, [r2, #0]
 8000cde:	f043 0201 	orr.w	r2, r3, #1
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3318      	adds	r3, #24
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	440b      	add	r3, r1
 8000cea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	e00e      	b.n	8000d0e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e006      	b.n	8000d0e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
  }
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d2c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d003      	beq.n	8000d3c <HAL_CAN_GetRxMessage+0x24>
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	f040 80f3 	bne.w	8000f22 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d10e      	bne.n	8000d60 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d116      	bne.n	8000d7e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e0e7      	b.n	8000f30 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d107      	bne.n	8000d7e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e0d8      	b.n	8000f30 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	331b      	adds	r3, #27
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	4413      	add	r3, r2
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f003 0204 	and.w	r2, r3, #4
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d10c      	bne.n	8000db6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	331b      	adds	r3, #27
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	4413      	add	r3, r2
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	0d5b      	lsrs	r3, r3, #21
 8000dac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	e00b      	b.n	8000dce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	331b      	adds	r3, #27
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	4413      	add	r3, r2
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	331b      	adds	r3, #27
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	4413      	add	r3, r2
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0202 	and.w	r2, r3, #2
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	331b      	adds	r3, #27
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4413      	add	r3, r2
 8000df0:	3304      	adds	r3, #4
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 020f 	and.w	r2, r3, #15
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	331b      	adds	r3, #27
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	4413      	add	r3, r2
 8000e08:	3304      	adds	r3, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	331b      	adds	r3, #27
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	4413      	add	r3, r2
 8000e20:	3304      	adds	r3, #4
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	0c1b      	lsrs	r3, r3, #16
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	011b      	lsls	r3, r3, #4
 8000e34:	4413      	add	r3, r2
 8000e36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	011b      	lsls	r3, r3, #4
 8000e4a:	4413      	add	r3, r2
 8000e4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	0a1a      	lsrs	r2, r3, #8
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	4413      	add	r3, r2
 8000e66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	0c1a      	lsrs	r2, r3, #16
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	3302      	adds	r3, #2
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	4413      	add	r3, r2
 8000e80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	0e1a      	lsrs	r2, r3, #24
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3303      	adds	r3, #3
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	011b      	lsls	r3, r3, #4
 8000eb0:	4413      	add	r3, r2
 8000eb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	0a1a      	lsrs	r2, r3, #8
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	3305      	adds	r3, #5
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	4413      	add	r3, r2
 8000ecc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	0c1a      	lsrs	r2, r3, #16
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	3306      	adds	r3, #6
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0e1a      	lsrs	r2, r3, #24
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	3307      	adds	r3, #7
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d108      	bne.n	8000f0e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0220 	orr.w	r2, r2, #32
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	e007      	b.n	8000f1e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0220 	orr.w	r2, r2, #32
 8000f1c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e006      	b.n	8000f30 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
  }
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b08a      	sub	sp, #40	; 0x28
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d07c      	beq.n	800107a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d023      	beq.n	8000fd2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f000 f983 	bl	80012a8 <HAL_CAN_TxMailbox0CompleteCallback>
 8000fa2:	e016      	b.n	8000fd2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d004      	beq.n	8000fb8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fb6:	e00c      	b.n	8000fd2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fca:	e002      	b.n	8000fd2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 f986 	bl	80012de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d024      	beq.n	8001026 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f962 	bl	80012ba <HAL_CAN_TxMailbox1CompleteCallback>
 8000ff6:	e016      	b.n	8001026 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	e00c      	b.n	8001026 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001012:	2b00      	cmp	r3, #0
 8001014:	d004      	beq.n	8001020 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
 800101e:	e002      	b.n	8001026 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f965 	bl	80012f0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d024      	beq.n	800107a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001038:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f941 	bl	80012cc <HAL_CAN_TxMailbox2CompleteCallback>
 800104a:	e016      	b.n	800107a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d004      	beq.n	8001060 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
 800105e:	e00c      	b.n	800107a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d004      	beq.n	8001074 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
 8001072:	e002      	b.n	800107a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f944 	bl	8001302 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	f003 0308 	and.w	r3, r3, #8
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00c      	beq.n	800109e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001094:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2210      	movs	r2, #16
 800109c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	f003 0304 	and.w	r3, r3, #4
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00b      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d006      	beq.n	80010c0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2208      	movs	r2, #8
 80010b8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f92a 	bl	8001314 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d009      	beq.n	80010de <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d002      	beq.n	80010de <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f001 f90d 	bl	80022f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00c      	beq.n	8001102 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2210      	movs	r2, #16
 8001100:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	f003 0320 	and.w	r3, r3, #32
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d006      	beq.n	8001124 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2208      	movs	r2, #8
 800111c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f90a 	bl	8001338 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	2b00      	cmp	r3, #0
 800112c:	d009      	beq.n	8001142 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f8f2 	bl	8001326 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00b      	beq.n	8001164 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2210      	movs	r2, #16
 800115c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f8f3 	bl	800134a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	2b00      	cmp	r3, #0
 8001176:	d006      	beq.n	8001186 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2208      	movs	r2, #8
 800117e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f8eb 	bl	800135c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d07b      	beq.n	8001288 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	d072      	beq.n	8001280 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d043      	beq.n	8001280 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d03e      	beq.n	8001280 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001208:	2b60      	cmp	r3, #96	; 0x60
 800120a:	d02b      	beq.n	8001264 <HAL_CAN_IRQHandler+0x32a>
 800120c:	2b60      	cmp	r3, #96	; 0x60
 800120e:	d82e      	bhi.n	800126e <HAL_CAN_IRQHandler+0x334>
 8001210:	2b50      	cmp	r3, #80	; 0x50
 8001212:	d022      	beq.n	800125a <HAL_CAN_IRQHandler+0x320>
 8001214:	2b50      	cmp	r3, #80	; 0x50
 8001216:	d82a      	bhi.n	800126e <HAL_CAN_IRQHandler+0x334>
 8001218:	2b40      	cmp	r3, #64	; 0x40
 800121a:	d019      	beq.n	8001250 <HAL_CAN_IRQHandler+0x316>
 800121c:	2b40      	cmp	r3, #64	; 0x40
 800121e:	d826      	bhi.n	800126e <HAL_CAN_IRQHandler+0x334>
 8001220:	2b30      	cmp	r3, #48	; 0x30
 8001222:	d010      	beq.n	8001246 <HAL_CAN_IRQHandler+0x30c>
 8001224:	2b30      	cmp	r3, #48	; 0x30
 8001226:	d822      	bhi.n	800126e <HAL_CAN_IRQHandler+0x334>
 8001228:	2b10      	cmp	r3, #16
 800122a:	d002      	beq.n	8001232 <HAL_CAN_IRQHandler+0x2f8>
 800122c:	2b20      	cmp	r3, #32
 800122e:	d005      	beq.n	800123c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001230:	e01d      	b.n	800126e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800123a:	e019      	b.n	8001270 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001244:	e014      	b.n	8001270 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	f043 0320 	orr.w	r3, r3, #32
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800124e:	e00f      	b.n	8001270 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001258:	e00a      	b.n	8001270 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001262:	e005      	b.n	8001270 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800126c:	e000      	b.n	8001270 <HAL_CAN_IRQHandler+0x336>
            break;
 800126e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	699a      	ldr	r2, [r3, #24]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800127e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2204      	movs	r2, #4
 8001286:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	2b00      	cmp	r3, #0
 800128c:	d008      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	431a      	orrs	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f867 	bl	800136e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4906      	ldr	r1, [pc, #24]	; (8001418 <__NVIC_EnableIRQ+0x34>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e4:	d301      	bcc.n	80014ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00f      	b.n	800150a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <SysTick_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f2:	210f      	movs	r1, #15
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f7ff ff90 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <SysTick_Config+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <SysTick_Config+0x40>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff2d 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001540:	f7ff ff42 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 8001544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	6978      	ldr	r0, [r7, #20]
 800154c:	f7ff ff90 	bl	8001470 <NVIC_EncodePriority>
 8001550:	4602      	mov	r2, r0
 8001552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff5f 	bl	800141c <__NVIC_SetPriority>
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff35 	bl	80013e4 <__NVIC_EnableIRQ>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff ffa2 	bl	80014d4 <SysTick_Config>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b08b      	sub	sp, #44	; 0x2c
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ae:	e169      	b.n	8001884 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015b0:	2201      	movs	r2, #1
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	f040 8158 	bne.w	800187e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4a9a      	ldr	r2, [pc, #616]	; (800183c <HAL_GPIO_Init+0x2a0>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d05e      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
 80015d8:	4a98      	ldr	r2, [pc, #608]	; (800183c <HAL_GPIO_Init+0x2a0>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d875      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 80015de:	4a98      	ldr	r2, [pc, #608]	; (8001840 <HAL_GPIO_Init+0x2a4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d058      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
 80015e4:	4a96      	ldr	r2, [pc, #600]	; (8001840 <HAL_GPIO_Init+0x2a4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d86f      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 80015ea:	4a96      	ldr	r2, [pc, #600]	; (8001844 <HAL_GPIO_Init+0x2a8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d052      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
 80015f0:	4a94      	ldr	r2, [pc, #592]	; (8001844 <HAL_GPIO_Init+0x2a8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d869      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 80015f6:	4a94      	ldr	r2, [pc, #592]	; (8001848 <HAL_GPIO_Init+0x2ac>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d04c      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
 80015fc:	4a92      	ldr	r2, [pc, #584]	; (8001848 <HAL_GPIO_Init+0x2ac>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d863      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 8001602:	4a92      	ldr	r2, [pc, #584]	; (800184c <HAL_GPIO_Init+0x2b0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d046      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
 8001608:	4a90      	ldr	r2, [pc, #576]	; (800184c <HAL_GPIO_Init+0x2b0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d85d      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 800160e:	2b12      	cmp	r3, #18
 8001610:	d82a      	bhi.n	8001668 <HAL_GPIO_Init+0xcc>
 8001612:	2b12      	cmp	r3, #18
 8001614:	d859      	bhi.n	80016ca <HAL_GPIO_Init+0x12e>
 8001616:	a201      	add	r2, pc, #4	; (adr r2, 800161c <HAL_GPIO_Init+0x80>)
 8001618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161c:	08001697 	.word	0x08001697
 8001620:	08001671 	.word	0x08001671
 8001624:	08001683 	.word	0x08001683
 8001628:	080016c5 	.word	0x080016c5
 800162c:	080016cb 	.word	0x080016cb
 8001630:	080016cb 	.word	0x080016cb
 8001634:	080016cb 	.word	0x080016cb
 8001638:	080016cb 	.word	0x080016cb
 800163c:	080016cb 	.word	0x080016cb
 8001640:	080016cb 	.word	0x080016cb
 8001644:	080016cb 	.word	0x080016cb
 8001648:	080016cb 	.word	0x080016cb
 800164c:	080016cb 	.word	0x080016cb
 8001650:	080016cb 	.word	0x080016cb
 8001654:	080016cb 	.word	0x080016cb
 8001658:	080016cb 	.word	0x080016cb
 800165c:	080016cb 	.word	0x080016cb
 8001660:	08001679 	.word	0x08001679
 8001664:	0800168d 	.word	0x0800168d
 8001668:	4a79      	ldr	r2, [pc, #484]	; (8001850 <HAL_GPIO_Init+0x2b4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800166e:	e02c      	b.n	80016ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	623b      	str	r3, [r7, #32]
          break;
 8001676:	e029      	b.n	80016cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	3304      	adds	r3, #4
 800167e:	623b      	str	r3, [r7, #32]
          break;
 8001680:	e024      	b.n	80016cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	3308      	adds	r3, #8
 8001688:	623b      	str	r3, [r7, #32]
          break;
 800168a:	e01f      	b.n	80016cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	330c      	adds	r3, #12
 8001692:	623b      	str	r3, [r7, #32]
          break;
 8001694:	e01a      	b.n	80016cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800169e:	2304      	movs	r3, #4
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e013      	b.n	80016cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d105      	bne.n	80016b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ac:	2308      	movs	r3, #8
 80016ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	611a      	str	r2, [r3, #16]
          break;
 80016b6:	e009      	b.n	80016cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b8:	2308      	movs	r3, #8
 80016ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	615a      	str	r2, [r3, #20]
          break;
 80016c2:	e003      	b.n	80016cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
          break;
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x130>
          break;
 80016ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2bff      	cmp	r3, #255	; 0xff
 80016d0:	d801      	bhi.n	80016d6 <HAL_GPIO_Init+0x13a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	e001      	b.n	80016da <HAL_GPIO_Init+0x13e>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3304      	adds	r3, #4
 80016da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2bff      	cmp	r3, #255	; 0xff
 80016e0:	d802      	bhi.n	80016e8 <HAL_GPIO_Init+0x14c>
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	e002      	b.n	80016ee <HAL_GPIO_Init+0x152>
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	3b08      	subs	r3, #8
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	210f      	movs	r1, #15
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	401a      	ands	r2, r3
 8001700:	6a39      	ldr	r1, [r7, #32]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	431a      	orrs	r2, r3
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 80b1 	beq.w	800187e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800171c:	4b4d      	ldr	r3, [pc, #308]	; (8001854 <HAL_GPIO_Init+0x2b8>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a4c      	ldr	r2, [pc, #304]	; (8001854 <HAL_GPIO_Init+0x2b8>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_GPIO_Init+0x2b8>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001734:	4a48      	ldr	r2, [pc, #288]	; (8001858 <HAL_GPIO_Init+0x2bc>)
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001740:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a40      	ldr	r2, [pc, #256]	; (800185c <HAL_GPIO_Init+0x2c0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <HAL_GPIO_Init+0x1ec>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a3f      	ldr	r2, [pc, #252]	; (8001860 <HAL_GPIO_Init+0x2c4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00d      	beq.n	8001784 <HAL_GPIO_Init+0x1e8>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a3e      	ldr	r2, [pc, #248]	; (8001864 <HAL_GPIO_Init+0x2c8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d007      	beq.n	8001780 <HAL_GPIO_Init+0x1e4>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a3d      	ldr	r2, [pc, #244]	; (8001868 <HAL_GPIO_Init+0x2cc>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_GPIO_Init+0x1e0>
 8001778:	2303      	movs	r3, #3
 800177a:	e006      	b.n	800178a <HAL_GPIO_Init+0x1ee>
 800177c:	2304      	movs	r3, #4
 800177e:	e004      	b.n	800178a <HAL_GPIO_Init+0x1ee>
 8001780:	2302      	movs	r3, #2
 8001782:	e002      	b.n	800178a <HAL_GPIO_Init+0x1ee>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <HAL_GPIO_Init+0x1ee>
 8001788:	2300      	movs	r3, #0
 800178a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178c:	f002 0203 	and.w	r2, r2, #3
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	4093      	lsls	r3, r2
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800179a:	492f      	ldr	r1, [pc, #188]	; (8001858 <HAL_GPIO_Init+0x2bc>)
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	3302      	adds	r3, #2
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_GPIO_Init+0x2d0>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	492c      	ldr	r1, [pc, #176]	; (800186c <HAL_GPIO_Init+0x2d0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <HAL_GPIO_Init+0x2d0>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4928      	ldr	r1, [pc, #160]	; (800186c <HAL_GPIO_Init+0x2d0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d006      	beq.n	80017ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_GPIO_Init+0x2d0>)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4922      	ldr	r1, [pc, #136]	; (800186c <HAL_GPIO_Init+0x2d0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <HAL_GPIO_Init+0x2d0>)
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	491e      	ldr	r1, [pc, #120]	; (800186c <HAL_GPIO_Init+0x2d0>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_GPIO_Init+0x2d0>)
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	4918      	ldr	r1, [pc, #96]	; (800186c <HAL_GPIO_Init+0x2d0>)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	608b      	str	r3, [r1, #8]
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_GPIO_Init+0x2d0>)
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	43db      	mvns	r3, r3
 800181a:	4914      	ldr	r1, [pc, #80]	; (800186c <HAL_GPIO_Init+0x2d0>)
 800181c:	4013      	ands	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d021      	beq.n	8001870 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_GPIO_Init+0x2d0>)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	490e      	ldr	r1, [pc, #56]	; (800186c <HAL_GPIO_Init+0x2d0>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
 8001838:	e021      	b.n	800187e <HAL_GPIO_Init+0x2e2>
 800183a:	bf00      	nop
 800183c:	10320000 	.word	0x10320000
 8001840:	10310000 	.word	0x10310000
 8001844:	10220000 	.word	0x10220000
 8001848:	10210000 	.word	0x10210000
 800184c:	10120000 	.word	0x10120000
 8001850:	10110000 	.word	0x10110000
 8001854:	40021000 	.word	0x40021000
 8001858:	40010000 	.word	0x40010000
 800185c:	40010800 	.word	0x40010800
 8001860:	40010c00 	.word	0x40010c00
 8001864:	40011000 	.word	0x40011000
 8001868:	40011400 	.word	0x40011400
 800186c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_GPIO_Init+0x304>)
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	43db      	mvns	r3, r3
 8001878:	4909      	ldr	r1, [pc, #36]	; (80018a0 <HAL_GPIO_Init+0x304>)
 800187a:	4013      	ands	r3, r2
 800187c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	3301      	adds	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	2b00      	cmp	r3, #0
 8001890:	f47f ae8e 	bne.w	80015b0 <HAL_GPIO_Init+0x14>
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	372c      	adds	r7, #44	; 0x2c
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40010400 	.word	0x40010400

080018a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
 80018b0:	4613      	mov	r3, r2
 80018b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b4:	787b      	ldrb	r3, [r7, #1]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018c0:	e003      	b.n	80018ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	041a      	lsls	r2, r3, #16
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	611a      	str	r2, [r3, #16]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ec:	887a      	ldrh	r2, [r7, #2]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018f4:	887a      	ldrh	r2, [r7, #2]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	611a      	str	r2, [r3, #16]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e272      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8087 	beq.w	8001a32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001924:	4b92      	ldr	r3, [pc, #584]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 030c 	and.w	r3, r3, #12
 800192c:	2b04      	cmp	r3, #4
 800192e:	d00c      	beq.n	800194a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001930:	4b8f      	ldr	r3, [pc, #572]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b08      	cmp	r3, #8
 800193a:	d112      	bne.n	8001962 <HAL_RCC_OscConfig+0x5e>
 800193c:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d10b      	bne.n	8001962 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194a:	4b89      	ldr	r3, [pc, #548]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06c      	beq.n	8001a30 <HAL_RCC_OscConfig+0x12c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d168      	bne.n	8001a30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e24c      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x76>
 800196c:	4b80      	ldr	r3, [pc, #512]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a7f      	ldr	r2, [pc, #508]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e02e      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10c      	bne.n	800199c <HAL_RCC_OscConfig+0x98>
 8001982:	4b7b      	ldr	r3, [pc, #492]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a7a      	ldr	r2, [pc, #488]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	4b78      	ldr	r3, [pc, #480]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a77      	ldr	r2, [pc, #476]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e01d      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0xbc>
 80019a6:	4b72      	ldr	r3, [pc, #456]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e00b      	b.n	80019d8 <HAL_RCC_OscConfig+0xd4>
 80019c0:	4b6b      	ldr	r3, [pc, #428]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a67      	ldr	r2, [pc, #412]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d013      	beq.n	8001a08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7fe fe8a 	bl	80006f8 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7fe fe86 	bl	80006f8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e200      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe4>
 8001a06:	e014      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7fe fe76 	bl	80006f8 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a10:	f7fe fe72 	bl	80006f8 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1ec      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a22:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x10c>
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d063      	beq.n	8001b06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d11c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x18c>
 8001a56:	4b46      	ldr	r3, [pc, #280]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d116      	bne.n	8001a90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	4b43      	ldr	r3, [pc, #268]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_RCC_OscConfig+0x176>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e1c0      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4939      	ldr	r1, [pc, #228]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	e03a      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7fe fe2b 	bl	80006f8 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7fe fe27 	bl	80006f8 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1a1      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4927      	ldr	r1, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e015      	b.n	8001b06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_RCC_OscConfig+0x270>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7fe fe0a 	bl	80006f8 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7fe fe06 	bl	80006f8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e180      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d03a      	beq.n	8001b88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d019      	beq.n	8001b4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7fe fdea 	bl	80006f8 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7fe fde6 	bl	80006f8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e160      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f000 faa6 	bl	8002098 <RCC_Delay>
 8001b4c:	e01c      	b.n	8001b88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_RCC_OscConfig+0x274>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7fe fdd0 	bl	80006f8 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5a:	e00f      	b.n	8001b7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5c:	f7fe fdcc 	bl	80006f8 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d908      	bls.n	8001b7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e146      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	42420000 	.word	0x42420000
 8001b78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e9      	bne.n	8001b5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a6 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a87      	ldr	r2, [pc, #540]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b85      	ldr	r3, [pc, #532]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	4b82      	ldr	r3, [pc, #520]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bce:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a7e      	ldr	r2, [pc, #504]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bda:	f7fe fd8d 	bl	80006f8 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7fe fd89 	bl	80006f8 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b64      	cmp	r3, #100	; 0x64
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e103      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b75      	ldr	r3, [pc, #468]	; (8001dcc <HAL_RCC_OscConfig+0x4c8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x312>
 8001c08:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x334>
 8001c1e:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	4a69      	ldr	r2, [pc, #420]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	6213      	str	r3, [r2, #32]
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a66      	ldr	r2, [pc, #408]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6213      	str	r3, [r2, #32]
 8001c36:	e01c      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x356>
 8001c40:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	4a60      	ldr	r2, [pc, #384]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	6213      	str	r3, [r2, #32]
 8001c4c:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6213      	str	r3, [r2, #32]
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0x36e>
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4a5a      	ldr	r2, [pc, #360]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	f023 0301 	bic.w	r3, r3, #1
 8001c64:	6213      	str	r3, [r2, #32]
 8001c66:	4b58      	ldr	r3, [pc, #352]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a57      	ldr	r2, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	f023 0304 	bic.w	r3, r3, #4
 8001c70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d015      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe fd3d 	bl	80006f8 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7fe fd39 	bl	80006f8 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e0b1      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0ee      	beq.n	8001c82 <HAL_RCC_OscConfig+0x37e>
 8001ca4:	e014      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7fe fd27 	bl	80006f8 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cae:	f7fe fd23 	bl	80006f8 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e09b      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc4:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1ee      	bne.n	8001cae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d105      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd6:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8087 	beq.w	8001dfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cec:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d061      	beq.n	8001dbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d146      	bne.n	8001d8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe fcf7 	bl	80006f8 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7fe fcf3 	bl	80006f8 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e06d      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d20:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d34:	d108      	bne.n	8001d48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d36:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4921      	ldr	r1, [pc, #132]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a19      	ldr	r1, [r3, #32]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	491b      	ldr	r1, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7fe fcc7 	bl	80006f8 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7fe fcc3 	bl	80006f8 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e03d      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x46a>
 8001d8c:	e035      	b.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_RCC_OscConfig+0x4cc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7fe fcb0 	bl	80006f8 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe fcac 	bl	80006f8 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e026      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x498>
 8001dba:	e01e      	b.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e019      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x500>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0d0      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d910      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 0207 	bic.w	r2, r3, #7
 8001e32:	4965      	ldr	r1, [pc, #404]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b8      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e64:	4b59      	ldr	r3, [pc, #356]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a58      	ldr	r2, [pc, #352]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e7c:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	494d      	ldr	r1, [pc, #308]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d040      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d115      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e07f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b41      	ldr	r3, [pc, #260]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e073      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06b      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4936      	ldr	r1, [pc, #216]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7fe fbfe 	bl	80006f8 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7fe fbfa 	bl	80006f8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e053      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d210      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0207 	bic.w	r2, r3, #7
 8001f3e:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e032      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4916      	ldr	r1, [pc, #88]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	490e      	ldr	r1, [pc, #56]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f96:	f000 f821 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	490a      	ldr	r1, [pc, #40]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fb5c 	bl	8000674 <HAL_InitTick>

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	080039b4 	.word	0x080039b4
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	20000000 	.word	0x20000000

08001fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b490      	push	{r4, r7}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fe2:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCC_GetSysClockFreq+0xac>)
 8001fe4:	1d3c      	adds	r4, r7, #4
 8001fe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fec:	f240 2301 	movw	r3, #513	; 0x201
 8001ff0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002006:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b04      	cmp	r3, #4
 8002014:	d002      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x40>
 8002016:	2b08      	cmp	r3, #8
 8002018:	d003      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x46>
 800201a:	e02b      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb4>)
 800201e:	623b      	str	r3, [r7, #32]
      break;
 8002020:	e02b      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	0c9b      	lsrs	r3, r3, #18
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3328      	adds	r3, #40	; 0x28
 800202c:	443b      	add	r3, r7
 800202e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002032:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800203e:	4b13      	ldr	r3, [pc, #76]	; (800208c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	0c5b      	lsrs	r3, r3, #17
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	3328      	adds	r3, #40	; 0x28
 800204a:	443b      	add	r3, r7
 800204c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002050:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002056:	fb03 f202 	mul.w	r2, r3, r2
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
 8002062:	e004      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002068:	fb02 f303 	mul.w	r3, r2, r3
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	623b      	str	r3, [r7, #32]
      break;
 8002072:	e002      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002076:	623b      	str	r3, [r7, #32]
      break;
 8002078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800207a:	6a3b      	ldr	r3, [r7, #32]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bc90      	pop	{r4, r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	080039a4 	.word	0x080039a4
 800208c:	40021000 	.word	0x40021000
 8002090:	007a1200 	.word	0x007a1200
 8002094:	003d0900 	.word	0x003d0900

08002098 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020a0:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <RCC_Delay+0x34>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <RCC_Delay+0x38>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0a5b      	lsrs	r3, r3, #9
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	fb02 f303 	mul.w	r3, r2, r3
 80020b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020b4:	bf00      	nop
  }
  while (Delay --);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1e5a      	subs	r2, r3, #1
 80020ba:	60fa      	str	r2, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f9      	bne.n	80020b4 <RCC_Delay+0x1c>
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	20000008 	.word	0x20000008
 80020d0:	10624dd3 	.word	0x10624dd3

080020d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d8:	f7fe fab6 	bl	8000648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020dc:	f000 f838 	bl	8002150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e0:	f000 f8b2 	bl	8002248 <MX_GPIO_Init>
  MX_CAN_Init();
 80020e4:	f000 f87a 	bl	80021dc <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
	
	/*----Config filter and start CAN interface------*/
	filter_can_config();
 80020e8:	f000 f99c 	bl	8002424 <filter_can_config>
	HAL_CAN_ConfigFilter(&hcan, &canfil);
 80020ec:	4913      	ldr	r1, [pc, #76]	; (800213c <main+0x68>)
 80020ee:	4814      	ldr	r0, [pc, #80]	; (8002140 <main+0x6c>)
 80020f0:	f7fe fc2b 	bl	800094a <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan);
 80020f4:	4812      	ldr	r0, [pc, #72]	; (8002140 <main+0x6c>)
 80020f6:	f7fe fcf1 	bl	8000adc <HAL_CAN_Start>
	//HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
	
	/*----Configure CAN TX messages------------*/
	txHeader.DLC = 8;
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <main+0x70>)
 80020fc:	2208      	movs	r2, #8
 80020fe:	611a      	str	r2, [r3, #16]
	txHeader.IDE = CAN_ID_STD;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <main+0x70>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <main+0x70>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
	txHeader.StdId = TX_ID;
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <main+0x70>)
 800210e:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8002112:	601a      	str	r2, [r3, #0]
	txHeader.ExtId = 0x02;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <main+0x70>)
 8002116:	2202      	movs	r2, #2
 8002118:	605a      	str	r2, [r3, #4]
	txHeader.TransmitGlobalTime = DISABLE;
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <main+0x70>)
 800211c:	2200      	movs	r2, #0
 800211e:	751a      	strb	r2, [r3, #20]
  while (1)
  {
	//	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &rxHeader, canRX);//Get data from MCU CAN RX buffer (CAN_RX_FIFO0) to our own RX buffer (canRX)
 //   if(rxHeader.StdId == RX_ID) //Verify if RX ID is 0x7DF
    {
				send_canmsg(canRX[2]);  //Call function that send CAN message
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <main+0x74>)
 8002122:	789b      	ldrb	r3, [r3, #2]
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f8f9 	bl	800231c <send_canmsg>
				rxHeader.StdId = 0x00;	//Clear RX ID for don't enter in this "if" on next loop
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <main+0x78>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
				HAL_Delay(500);					//Some delay for my application not go to fast, we can comment this line for faster messages
 8002130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002134:	f7fe faea 	bl	800070c <HAL_Delay>
				send_canmsg(canRX[2]);  //Call function that send CAN message
 8002138:	e7f2      	b.n	8002120 <main+0x4c>
 800213a:	bf00      	nop
 800213c:	200000ec 	.word	0x200000ec
 8002140:	20000090 	.word	0x20000090
 8002144:	200000d4 	.word	0x200000d4
 8002148:	20000118 	.word	0x20000118
 800214c:	200000b8 	.word	0x200000b8

08002150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b090      	sub	sp, #64	; 0x40
 8002154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002156:	f107 0318 	add.w	r3, r7, #24
 800215a:	2228      	movs	r2, #40	; 0x28
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fbce 	bl	8002900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002172:	2301      	movs	r3, #1
 8002174:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002176:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800217a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002180:	2301      	movs	r3, #1
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002184:	2302      	movs	r3, #2
 8002186:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800218c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800218e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002194:	f107 0318 	add.w	r3, r7, #24
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fbb3 	bl	8001904 <HAL_RCC_OscConfig>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80021a4:	f000 f993 	bl	80024ce <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a8:	230f      	movs	r3, #15
 80021aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ac:	2302      	movs	r3, #2
 80021ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021be:	1d3b      	adds	r3, r7, #4
 80021c0:	2102      	movs	r1, #2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fe20 	bl	8001e08 <HAL_RCC_ClockConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80021ce:	f000 f97e 	bl	80024ce <Error_Handler>
  }
}
 80021d2:	bf00      	nop
 80021d4:	3740      	adds	r7, #64	; 0x40
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <MX_CAN_Init+0x64>)
 80021e2:	4a18      	ldr	r2, [pc, #96]	; (8002244 <MX_CAN_Init+0x68>)
 80021e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <MX_CAN_Init+0x64>)
 80021e8:	2209      	movs	r2, #9
 80021ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <MX_CAN_Init+0x64>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_CAN_Init+0x64>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_CAN_Init+0x64>)
 80021fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021fe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_CAN_Init+0x64>)
 8002202:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002206:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <MX_CAN_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_CAN_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <MX_CAN_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_CAN_Init+0x64>)
 800221c:	2200      	movs	r2, #0
 800221e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <MX_CAN_Init+0x64>)
 8002222:	2200      	movs	r2, #0
 8002224:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_CAN_Init+0x64>)
 8002228:	2200      	movs	r2, #0
 800222a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <MX_CAN_Init+0x64>)
 800222e:	f7fe fa91 	bl	8000754 <HAL_CAN_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8002238:	f000 f949 	bl	80024ce <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000090 	.word	0x20000090
 8002244:	40006400 	.word	0x40006400

08002248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225c:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <MX_GPIO_Init+0xa8>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <MX_GPIO_Init+0xa8>)
 8002262:	f043 0310 	orr.w	r3, r3, #16
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <MX_GPIO_Init+0xa8>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0310 	and.w	r3, r3, #16
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002274:	4b1e      	ldr	r3, [pc, #120]	; (80022f0 <MX_GPIO_Init+0xa8>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <MX_GPIO_Init+0xa8>)
 800227a:	f043 0320 	orr.w	r3, r3, #32
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <MX_GPIO_Init+0xa8>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800228c:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <MX_GPIO_Init+0xa8>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <MX_GPIO_Init+0xa8>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <MX_GPIO_Init+0xa8>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <MX_GPIO_Init+0xa8>)
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <MX_GPIO_Init+0xa8>)
 80022aa:	f043 0308 	orr.w	r3, r3, #8
 80022ae:	6193      	str	r3, [r2, #24]
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <MX_GPIO_Init+0xa8>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80022bc:	2200      	movs	r2, #0
 80022be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c2:	480c      	ldr	r0, [pc, #48]	; (80022f4 <MX_GPIO_Init+0xac>)
 80022c4:	f7ff faee 	bl	80018a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80022c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80022da:	f107 0310 	add.w	r3, r7, #16
 80022de:	4619      	mov	r1, r3
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <MX_GPIO_Init+0xac>)
 80022e2:	f7ff f95b 	bl	800159c <HAL_GPIO_Init>

}
 80022e6:	bf00      	nop
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40011000 	.word	0x40011000

080022f8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, canRX); //Receive CAN bus message to canRX buffer in INTERRUPT MODE
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8002304:	2100      	movs	r1, #0
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe fd06 	bl	8000d18 <HAL_CAN_GetRxMessage>
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);// toggle PC13 LED
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000118 	.word	0x20000118
 8002318:	200000b8 	.word	0x200000b8

0800231c <send_canmsg>:

void send_canmsg(unsigned char pid)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af02      	add	r7, sp, #8
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
		uint8_t can_msg[8]; //create CAN TX data message
    can_msg[0] = 0x41;  //response header
 8002326:	2341      	movs	r3, #65	; 0x41
 8002328:	723b      	strb	r3, [r7, #8]
    can_msg[1] = 0x01;	//mode 1
 800232a:	2301      	movs	r3, #1
 800232c:	727b      	strb	r3, [r7, #9]
    can_msg[2] = pid;		//requested PID
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	72bb      	strb	r3, [r7, #10]
		int valA = rand();	//randomic value A
 8002332:	f000 faed 	bl	8002910 <rand>
 8002336:	61f8      	str	r0, [r7, #28]
		int valB = rand();	//randomic value B
 8002338:	f000 faea 	bl	8002910 <rand>
 800233c:	61b8      	str	r0, [r7, #24]
		int valC = rand();	//randomic value C
 800233e:	f000 fae7 	bl	8002910 <rand>
 8002342:	6178      	str	r0, [r7, #20]
		int valD = rand();	//randomic value D
 8002344:	f000 fae4 	bl	8002910 <rand>
 8002348:	6138      	str	r0, [r7, #16]
    can_msg[3] = Map(valA, 0, 2147483647, 0, 255); //scale to 8bit value
 800234a:	69f8      	ldr	r0, [r7, #28]
 800234c:	f7fd ffb8 	bl	80002c0 <__aeabi_i2f>
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <send_canmsg+0xf4>)
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 800235c:	f04f 0100 	mov.w	r1, #0
 8002360:	f000 f88a 	bl	8002478 <Map>
 8002364:	4603      	mov	r3, r0
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f94e 	bl	8000608 <__aeabi_f2uiz>
 800236c:	4603      	mov	r3, r0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	72fb      	strb	r3, [r7, #11]
    can_msg[4] = Map(valB, 0, 2147483647, 0, 255); //scale to 8bit value
 8002372:	69b8      	ldr	r0, [r7, #24]
 8002374:	f7fd ffa4 	bl	80002c0 <__aeabi_i2f>
 8002378:	4b25      	ldr	r3, [pc, #148]	; (8002410 <send_canmsg+0xf4>)
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 8002384:	f04f 0100 	mov.w	r1, #0
 8002388:	f000 f876 	bl	8002478 <Map>
 800238c:	4603      	mov	r3, r0
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f93a 	bl	8000608 <__aeabi_f2uiz>
 8002394:	4603      	mov	r3, r0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	733b      	strb	r3, [r7, #12]
		can_msg[5] = Map(valC, 0, 2147483647, 0, 255); //scale to 8bit value
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7fd ff90 	bl	80002c0 <__aeabi_i2f>
 80023a0:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <send_canmsg+0xf4>)
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 80023ac:	f04f 0100 	mov.w	r1, #0
 80023b0:	f000 f862 	bl	8002478 <Map>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f926 	bl	8000608 <__aeabi_f2uiz>
 80023bc:	4603      	mov	r3, r0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	737b      	strb	r3, [r7, #13]
		can_msg[6] = Map(valD, 0, 2147483647, 0, 255); //scale to 8bit value
 80023c2:	6938      	ldr	r0, [r7, #16]
 80023c4:	f7fd ff7c 	bl	80002c0 <__aeabi_i2f>
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <send_canmsg+0xf4>)
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	f04f 429e 	mov.w	r2, #1325400064	; 0x4f000000
 80023d4:	f04f 0100 	mov.w	r1, #0
 80023d8:	f000 f84e 	bl	8002478 <Map>
 80023dc:	4603      	mov	r3, r0
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe f912 	bl	8000608 <__aeabi_f2uiz>
 80023e4:	4603      	mov	r3, r0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	73bb      	strb	r3, [r7, #14]
    can_msg[7] = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
		
		HAL_CAN_AddTxMessage(&hcan, &txHeader, can_msg, &canMailbox);//send TX CAN message
 80023ee:	f107 0208 	add.w	r2, r7, #8
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <send_canmsg+0xf8>)
 80023f4:	4908      	ldr	r1, [pc, #32]	; (8002418 <send_canmsg+0xfc>)
 80023f6:	4809      	ldr	r0, [pc, #36]	; (800241c <send_canmsg+0x100>)
 80023f8:	f7fe fbb4 	bl	8000b64 <HAL_CAN_AddTxMessage>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);// toggle PC13 LED
 80023fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <send_canmsg+0x104>)
 8002402:	f7ff fa67 	bl	80018d4 <HAL_GPIO_TogglePin>
}
 8002406:	bf00      	nop
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	437f0000 	.word	0x437f0000
 8002414:	20000114 	.word	0x20000114
 8002418:	200000d4 	.word	0x200000d4
 800241c:	20000090 	.word	0x20000090
 8002420:	40011000 	.word	0x40011000

08002424 <filter_can_config>:

void filter_can_config()
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	//https://www.esacademy.com/en/library/calculators/can-best-and-worst-case-calculator.html
	//https://schulz-m.github.io/2017/03/23/stm32-can-id-filter/
	canfil.FilterBank = 0;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <filter_can_config+0x50>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
	canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <filter_can_config+0x50>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
	canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <filter_can_config+0x50>)
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]

	canfil.FilterIdHigh = ((RX_ID << 5)  | (RX_ID >> (32 - 5))) & 0xFFFF; // STID[10:0] & EXTID[17:13]
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <filter_can_config+0x50>)
 800243c:	f64f 32e0 	movw	r2, #64480	; 0xfbe0
 8002440:	601a      	str	r2, [r3, #0]
	canfil.FilterIdLow = (RX_ID >> (11 - 3)) & 0xFFF8; // EXID[12:5] & 3 Reserved bits
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <filter_can_config+0x50>)
 8002444:	2200      	movs	r2, #0
 8002446:	605a      	str	r2, [r3, #4]
	
	canfil.FilterMaskIdHigh = ((0x1FFFFFFF << 5)  | (0x1FFFFFFF >> (32 - 5))) & 0xFFFF;
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <filter_can_config+0x50>)
 800244a:	f64f 72e3 	movw	r2, #65507	; 0xffe3
 800244e:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = (0x1FFFFFFF >> (11 - 3)) & 0xFFF8;
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <filter_can_config+0x50>)
 8002452:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8002456:	60da      	str	r2, [r3, #12]
	
	canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <filter_can_config+0x50>)
 800245a:	2201      	movs	r2, #1
 800245c:	61da      	str	r2, [r3, #28]
	canfil.FilterActivation = ENABLE;
 800245e:	4b05      	ldr	r3, [pc, #20]	; (8002474 <filter_can_config+0x50>)
 8002460:	2201      	movs	r2, #1
 8002462:	621a      	str	r2, [r3, #32]
	canfil.SlaveStartFilterBank = 14;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <filter_can_config+0x50>)
 8002466:	220e      	movs	r2, #14
 8002468:	625a      	str	r2, [r3, #36]	; 0x24
}
 800246a:	bf00      	nop
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	200000ec 	.word	0x200000ec

08002478 <Map>:

float Map (float inVal, float inMin, float inMax, float outMin, float outMax)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
	return ( (inVal - inMin)*(outMax - outMin)/(inMax - inMin) + outMin );
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7fd fe63 	bl	8000154 <__aeabi_fsub>
 800248e:	4603      	mov	r3, r0
 8002490:	461c      	mov	r4, r3
 8002492:	6839      	ldr	r1, [r7, #0]
 8002494:	6a38      	ldr	r0, [r7, #32]
 8002496:	f7fd fe5d 	bl	8000154 <__aeabi_fsub>
 800249a:	4603      	mov	r3, r0
 800249c:	4619      	mov	r1, r3
 800249e:	4620      	mov	r0, r4
 80024a0:	f7fd ff62 	bl	8000368 <__aeabi_fmul>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461c      	mov	r4, r3
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fd fe52 	bl	8000154 <__aeabi_fsub>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4619      	mov	r1, r3
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7fe f80b 	bl	80004d0 <__aeabi_fdiv>
 80024ba:	4603      	mov	r3, r0
 80024bc:	6839      	ldr	r1, [r7, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fe4a 	bl	8000158 <__addsf3>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}

080024ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_MspInit+0x5c>)
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	4a14      	ldr	r2, [pc, #80]	; (8002538 <HAL_MspInit+0x5c>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6193      	str	r3, [r2, #24]
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_MspInit+0x5c>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_MspInit+0x5c>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <HAL_MspInit+0x5c>)
 8002500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002504:	61d3      	str	r3, [r2, #28]
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_MspInit+0x5c>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_MspInit+0x60>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	4a04      	ldr	r2, [pc, #16]	; (800253c <HAL_MspInit+0x60>)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	40021000 	.word	0x40021000
 800253c:	40010000 	.word	0x40010000

08002540 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a29      	ldr	r2, [pc, #164]	; (8002600 <HAL_CAN_MspInit+0xc0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d14b      	bne.n	80025f8 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002560:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_CAN_MspInit+0xc4>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	4a27      	ldr	r2, [pc, #156]	; (8002604 <HAL_CAN_MspInit+0xc4>)
 8002566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800256a:	61d3      	str	r3, [r2, #28]
 800256c:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_CAN_MspInit+0xc4>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_CAN_MspInit+0xc4>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	4a21      	ldr	r2, [pc, #132]	; (8002604 <HAL_CAN_MspInit+0xc4>)
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	6193      	str	r3, [r2, #24]
 8002584:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <HAL_CAN_MspInit+0xc4>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4818      	ldr	r0, [pc, #96]	; (8002608 <HAL_CAN_MspInit+0xc8>)
 80025a6:	f7fe fff9 	bl	800159c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	4812      	ldr	r0, [pc, #72]	; (8002608 <HAL_CAN_MspInit+0xc8>)
 80025c0:	f7fe ffec 	bl	800159c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_CAN_MspInit+0xcc>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_CAN_MspInit+0xcc>)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	2014      	movs	r0, #20
 80025ee:	f7fe ff9e 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80025f2:	2014      	movs	r0, #20
 80025f4:	f7fe ffb7 	bl	8001566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80025f8:	bf00      	nop
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40006400 	.word	0x40006400
 8002604:	40021000 	.word	0x40021000
 8002608:	40010c00 	.word	0x40010c00
 800260c:	40010000 	.word	0x40010000

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <HardFault_Handler+0x4>

08002622 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <MemManage_Handler+0x4>

08002628 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <BusFault_Handler+0x4>

0800262e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002632:	e7fe      	b.n	8002632 <UsageFault_Handler+0x4>

08002634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265c:	f7fe f83a 	bl	80006d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800266a:	f7fe fc66 	bl	8000f3a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000090 	.word	0x20000090

08002678 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return 1;
 800267c:	2301      	movs	r3, #1
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <_kill>:

int _kill(int pid, int sig)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002690:	f000 f90c 	bl	80028ac <__errno>
 8002694:	4603      	mov	r3, r0
 8002696:	2216      	movs	r2, #22
 8002698:	601a      	str	r2, [r3, #0]
  return -1;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_exit>:

void _exit (int status)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026ae:	f04f 31ff 	mov.w	r1, #4294967295
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ffe7 	bl	8002686 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026b8:	e7fe      	b.n	80026b8 <_exit+0x12>

080026ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e00a      	b.n	80026e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026cc:	f3af 8000 	nop.w
 80026d0:	4601      	mov	r1, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	60ba      	str	r2, [r7, #8]
 80026d8:	b2ca      	uxtb	r2, r1
 80026da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3301      	adds	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	dbf0      	blt.n	80026cc <_read+0x12>
  }

  return len;
 80026ea:	687b      	ldr	r3, [r7, #4]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e009      	b.n	800271a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	60ba      	str	r2, [r7, #8]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3301      	adds	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	429a      	cmp	r2, r3
 8002720:	dbf1      	blt.n	8002706 <_write+0x12>
  }
  return len;
 8002722:	687b      	ldr	r3, [r7, #4]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <_close>:

int _close(int file)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002752:	605a      	str	r2, [r3, #4]
  return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <_isatty>:

int _isatty(int file)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002768:	2301      	movs	r3, #1
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002794:	4a14      	ldr	r2, [pc, #80]	; (80027e8 <_sbrk+0x5c>)
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <_sbrk+0x60>)
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <_sbrk+0x64>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <_sbrk+0x68>)
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d207      	bcs.n	80027cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027bc:	f000 f876 	bl	80028ac <__errno>
 80027c0:	4603      	mov	r3, r0
 80027c2:	220c      	movs	r2, #12
 80027c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ca:	e009      	b.n	80027e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	4a05      	ldr	r2, [pc, #20]	; (80027f0 <_sbrk+0x64>)
 80027dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20005000 	.word	0x20005000
 80027ec:	00000400 	.word	0x00000400
 80027f0:	20000120 	.word	0x20000120
 80027f4:	20000138 	.word	0x20000138

080027f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027fc:	4b15      	ldr	r3, [pc, #84]	; (8002854 <SystemInit+0x5c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <SystemInit+0x5c>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <SystemInit+0x5c>)
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4911      	ldr	r1, [pc, #68]	; (8002854 <SystemInit+0x5c>)
 800280e:	4b12      	ldr	r3, [pc, #72]	; (8002858 <SystemInit+0x60>)
 8002810:	4013      	ands	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <SystemInit+0x5c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <SystemInit+0x5c>)
 800281a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800281e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <SystemInit+0x5c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <SystemInit+0x5c>)
 800282a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <SystemInit+0x5c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a07      	ldr	r2, [pc, #28]	; (8002854 <SystemInit+0x5c>)
 8002836:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800283a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <SystemInit+0x5c>)
 800283e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002842:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <SystemInit+0x64>)
 8002846:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800284a:	609a      	str	r2, [r3, #8]
#endif 
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	40021000 	.word	0x40021000
 8002858:	f8ff0000 	.word	0xf8ff0000
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002860:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002862:	e003      	b.n	800286c <LoopCopyDataInit>

08002864 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002866:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002868:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800286a:	3104      	adds	r1, #4

0800286c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800286c:	480a      	ldr	r0, [pc, #40]	; (8002898 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002870:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002872:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002874:	d3f6      	bcc.n	8002864 <CopyDataInit>
  ldr r2, =_sbss
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002878:	e002      	b.n	8002880 <LoopFillZerobss>

0800287a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800287c:	f842 3b04 	str.w	r3, [r2], #4

08002880 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002882:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002884:	d3f9      	bcc.n	800287a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002886:	f7ff ffb7 	bl	80027f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288a:	f000 f815 	bl	80028b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800288e:	f7ff fc21 	bl	80020d4 <main>
  bx lr
 8002892:	4770      	bx	lr
  ldr r3, =_sidata
 8002894:	08003b14 	.word	0x08003b14
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800289c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80028a0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80028a4:	20000134 	.word	0x20000134

080028a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028a8:	e7fe      	b.n	80028a8 <ADC1_2_IRQHandler>
	...

080028ac <__errno>:
 80028ac:	4b01      	ldr	r3, [pc, #4]	; (80028b4 <__errno+0x8>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	2000000c 	.word	0x2000000c

080028b8 <__libc_init_array>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	2600      	movs	r6, #0
 80028bc:	4d0c      	ldr	r5, [pc, #48]	; (80028f0 <__libc_init_array+0x38>)
 80028be:	4c0d      	ldr	r4, [pc, #52]	; (80028f4 <__libc_init_array+0x3c>)
 80028c0:	1b64      	subs	r4, r4, r5
 80028c2:	10a4      	asrs	r4, r4, #2
 80028c4:	42a6      	cmp	r6, r4
 80028c6:	d109      	bne.n	80028dc <__libc_init_array+0x24>
 80028c8:	f001 f860 	bl	800398c <_init>
 80028cc:	2600      	movs	r6, #0
 80028ce:	4d0a      	ldr	r5, [pc, #40]	; (80028f8 <__libc_init_array+0x40>)
 80028d0:	4c0a      	ldr	r4, [pc, #40]	; (80028fc <__libc_init_array+0x44>)
 80028d2:	1b64      	subs	r4, r4, r5
 80028d4:	10a4      	asrs	r4, r4, #2
 80028d6:	42a6      	cmp	r6, r4
 80028d8:	d105      	bne.n	80028e6 <__libc_init_array+0x2e>
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e0:	4798      	blx	r3
 80028e2:	3601      	adds	r6, #1
 80028e4:	e7ee      	b.n	80028c4 <__libc_init_array+0xc>
 80028e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ea:	4798      	blx	r3
 80028ec:	3601      	adds	r6, #1
 80028ee:	e7f2      	b.n	80028d6 <__libc_init_array+0x1e>
 80028f0:	08003b0c 	.word	0x08003b0c
 80028f4:	08003b0c 	.word	0x08003b0c
 80028f8:	08003b0c 	.word	0x08003b0c
 80028fc:	08003b10 	.word	0x08003b10

08002900 <memset>:
 8002900:	4603      	mov	r3, r0
 8002902:	4402      	add	r2, r0
 8002904:	4293      	cmp	r3, r2
 8002906:	d100      	bne.n	800290a <memset+0xa>
 8002908:	4770      	bx	lr
 800290a:	f803 1b01 	strb.w	r1, [r3], #1
 800290e:	e7f9      	b.n	8002904 <memset+0x4>

08002910 <rand>:
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <rand+0x5c>)
 8002912:	b510      	push	{r4, lr}
 8002914:	681c      	ldr	r4, [r3, #0]
 8002916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002918:	b9b3      	cbnz	r3, 8002948 <rand+0x38>
 800291a:	2018      	movs	r0, #24
 800291c:	f000 f866 	bl	80029ec <malloc>
 8002920:	4602      	mov	r2, r0
 8002922:	63a0      	str	r0, [r4, #56]	; 0x38
 8002924:	b920      	cbnz	r0, 8002930 <rand+0x20>
 8002926:	214e      	movs	r1, #78	; 0x4e
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <rand+0x60>)
 800292a:	4812      	ldr	r0, [pc, #72]	; (8002974 <rand+0x64>)
 800292c:	f000 f82e 	bl	800298c <__assert_func>
 8002930:	4911      	ldr	r1, [pc, #68]	; (8002978 <rand+0x68>)
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <rand+0x6c>)
 8002934:	e9c0 1300 	strd	r1, r3, [r0]
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <rand+0x70>)
 800293a:	2100      	movs	r1, #0
 800293c:	6083      	str	r3, [r0, #8]
 800293e:	230b      	movs	r3, #11
 8002940:	8183      	strh	r3, [r0, #12]
 8002942:	2001      	movs	r0, #1
 8002944:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002948:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800294a:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <rand+0x74>)
 800294c:	6920      	ldr	r0, [r4, #16]
 800294e:	6963      	ldr	r3, [r4, #20]
 8002950:	4342      	muls	r2, r0
 8002952:	490d      	ldr	r1, [pc, #52]	; (8002988 <rand+0x78>)
 8002954:	fb01 2203 	mla	r2, r1, r3, r2
 8002958:	fba0 0101 	umull	r0, r1, r0, r1
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	eb42 0001 	adc.w	r0, r2, r1
 8002962:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002966:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800296a:	bd10      	pop	{r4, pc}
 800296c:	2000000c 	.word	0x2000000c
 8002970:	080039c8 	.word	0x080039c8
 8002974:	080039df 	.word	0x080039df
 8002978:	abcd330e 	.word	0xabcd330e
 800297c:	e66d1234 	.word	0xe66d1234
 8002980:	0005deec 	.word	0x0005deec
 8002984:	5851f42d 	.word	0x5851f42d
 8002988:	4c957f2d 	.word	0x4c957f2d

0800298c <__assert_func>:
 800298c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800298e:	4614      	mov	r4, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <__assert_func+0x2c>)
 8002994:	4605      	mov	r5, r0
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68d8      	ldr	r0, [r3, #12]
 800299a:	b14c      	cbz	r4, 80029b0 <__assert_func+0x24>
 800299c:	4b07      	ldr	r3, [pc, #28]	; (80029bc <__assert_func+0x30>)
 800299e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80029a2:	9100      	str	r1, [sp, #0]
 80029a4:	462b      	mov	r3, r5
 80029a6:	4906      	ldr	r1, [pc, #24]	; (80029c0 <__assert_func+0x34>)
 80029a8:	f000 f80e 	bl	80029c8 <fiprintf>
 80029ac:	f000 fcc0 	bl	8003330 <abort>
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <__assert_func+0x38>)
 80029b2:	461c      	mov	r4, r3
 80029b4:	e7f3      	b.n	800299e <__assert_func+0x12>
 80029b6:	bf00      	nop
 80029b8:	2000000c 	.word	0x2000000c
 80029bc:	08003a3a 	.word	0x08003a3a
 80029c0:	08003a47 	.word	0x08003a47
 80029c4:	08003a75 	.word	0x08003a75

080029c8 <fiprintf>:
 80029c8:	b40e      	push	{r1, r2, r3}
 80029ca:	b503      	push	{r0, r1, lr}
 80029cc:	4601      	mov	r1, r0
 80029ce:	ab03      	add	r3, sp, #12
 80029d0:	4805      	ldr	r0, [pc, #20]	; (80029e8 <fiprintf+0x20>)
 80029d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80029d6:	6800      	ldr	r0, [r0, #0]
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	f000 f913 	bl	8002c04 <_vfiprintf_r>
 80029de:	b002      	add	sp, #8
 80029e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80029e4:	b003      	add	sp, #12
 80029e6:	4770      	bx	lr
 80029e8:	2000000c 	.word	0x2000000c

080029ec <malloc>:
 80029ec:	4b02      	ldr	r3, [pc, #8]	; (80029f8 <malloc+0xc>)
 80029ee:	4601      	mov	r1, r0
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	f000 b86b 	b.w	8002acc <_malloc_r>
 80029f6:	bf00      	nop
 80029f8:	2000000c 	.word	0x2000000c

080029fc <_free_r>:
 80029fc:	b538      	push	{r3, r4, r5, lr}
 80029fe:	4605      	mov	r5, r0
 8002a00:	2900      	cmp	r1, #0
 8002a02:	d040      	beq.n	8002a86 <_free_r+0x8a>
 8002a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a08:	1f0c      	subs	r4, r1, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bfb8      	it	lt
 8002a0e:	18e4      	addlt	r4, r4, r3
 8002a10:	f000 fec0 	bl	8003794 <__malloc_lock>
 8002a14:	4a1c      	ldr	r2, [pc, #112]	; (8002a88 <_free_r+0x8c>)
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	b933      	cbnz	r3, 8002a28 <_free_r+0x2c>
 8002a1a:	6063      	str	r3, [r4, #4]
 8002a1c:	6014      	str	r4, [r2, #0]
 8002a1e:	4628      	mov	r0, r5
 8002a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a24:	f000 bebc 	b.w	80037a0 <__malloc_unlock>
 8002a28:	42a3      	cmp	r3, r4
 8002a2a:	d908      	bls.n	8002a3e <_free_r+0x42>
 8002a2c:	6820      	ldr	r0, [r4, #0]
 8002a2e:	1821      	adds	r1, r4, r0
 8002a30:	428b      	cmp	r3, r1
 8002a32:	bf01      	itttt	eq
 8002a34:	6819      	ldreq	r1, [r3, #0]
 8002a36:	685b      	ldreq	r3, [r3, #4]
 8002a38:	1809      	addeq	r1, r1, r0
 8002a3a:	6021      	streq	r1, [r4, #0]
 8002a3c:	e7ed      	b.n	8002a1a <_free_r+0x1e>
 8002a3e:	461a      	mov	r2, r3
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b10b      	cbz	r3, 8002a48 <_free_r+0x4c>
 8002a44:	42a3      	cmp	r3, r4
 8002a46:	d9fa      	bls.n	8002a3e <_free_r+0x42>
 8002a48:	6811      	ldr	r1, [r2, #0]
 8002a4a:	1850      	adds	r0, r2, r1
 8002a4c:	42a0      	cmp	r0, r4
 8002a4e:	d10b      	bne.n	8002a68 <_free_r+0x6c>
 8002a50:	6820      	ldr	r0, [r4, #0]
 8002a52:	4401      	add	r1, r0
 8002a54:	1850      	adds	r0, r2, r1
 8002a56:	4283      	cmp	r3, r0
 8002a58:	6011      	str	r1, [r2, #0]
 8002a5a:	d1e0      	bne.n	8002a1e <_free_r+0x22>
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4401      	add	r1, r0
 8002a62:	6011      	str	r1, [r2, #0]
 8002a64:	6053      	str	r3, [r2, #4]
 8002a66:	e7da      	b.n	8002a1e <_free_r+0x22>
 8002a68:	d902      	bls.n	8002a70 <_free_r+0x74>
 8002a6a:	230c      	movs	r3, #12
 8002a6c:	602b      	str	r3, [r5, #0]
 8002a6e:	e7d6      	b.n	8002a1e <_free_r+0x22>
 8002a70:	6820      	ldr	r0, [r4, #0]
 8002a72:	1821      	adds	r1, r4, r0
 8002a74:	428b      	cmp	r3, r1
 8002a76:	bf01      	itttt	eq
 8002a78:	6819      	ldreq	r1, [r3, #0]
 8002a7a:	685b      	ldreq	r3, [r3, #4]
 8002a7c:	1809      	addeq	r1, r1, r0
 8002a7e:	6021      	streq	r1, [r4, #0]
 8002a80:	6063      	str	r3, [r4, #4]
 8002a82:	6054      	str	r4, [r2, #4]
 8002a84:	e7cb      	b.n	8002a1e <_free_r+0x22>
 8002a86:	bd38      	pop	{r3, r4, r5, pc}
 8002a88:	20000124 	.word	0x20000124

08002a8c <sbrk_aligned>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	4e0e      	ldr	r6, [pc, #56]	; (8002ac8 <sbrk_aligned+0x3c>)
 8002a90:	460c      	mov	r4, r1
 8002a92:	6831      	ldr	r1, [r6, #0]
 8002a94:	4605      	mov	r5, r0
 8002a96:	b911      	cbnz	r1, 8002a9e <sbrk_aligned+0x12>
 8002a98:	f000 fb7a 	bl	8003190 <_sbrk_r>
 8002a9c:	6030      	str	r0, [r6, #0]
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f000 fb75 	bl	8003190 <_sbrk_r>
 8002aa6:	1c43      	adds	r3, r0, #1
 8002aa8:	d00a      	beq.n	8002ac0 <sbrk_aligned+0x34>
 8002aaa:	1cc4      	adds	r4, r0, #3
 8002aac:	f024 0403 	bic.w	r4, r4, #3
 8002ab0:	42a0      	cmp	r0, r4
 8002ab2:	d007      	beq.n	8002ac4 <sbrk_aligned+0x38>
 8002ab4:	1a21      	subs	r1, r4, r0
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	f000 fb6a 	bl	8003190 <_sbrk_r>
 8002abc:	3001      	adds	r0, #1
 8002abe:	d101      	bne.n	8002ac4 <sbrk_aligned+0x38>
 8002ac0:	f04f 34ff 	mov.w	r4, #4294967295
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}
 8002ac8:	20000128 	.word	0x20000128

08002acc <_malloc_r>:
 8002acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad0:	1ccd      	adds	r5, r1, #3
 8002ad2:	f025 0503 	bic.w	r5, r5, #3
 8002ad6:	3508      	adds	r5, #8
 8002ad8:	2d0c      	cmp	r5, #12
 8002ada:	bf38      	it	cc
 8002adc:	250c      	movcc	r5, #12
 8002ade:	2d00      	cmp	r5, #0
 8002ae0:	4607      	mov	r7, r0
 8002ae2:	db01      	blt.n	8002ae8 <_malloc_r+0x1c>
 8002ae4:	42a9      	cmp	r1, r5
 8002ae6:	d905      	bls.n	8002af4 <_malloc_r+0x28>
 8002ae8:	230c      	movs	r3, #12
 8002aea:	2600      	movs	r6, #0
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	4630      	mov	r0, r6
 8002af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002af4:	4e2e      	ldr	r6, [pc, #184]	; (8002bb0 <_malloc_r+0xe4>)
 8002af6:	f000 fe4d 	bl	8003794 <__malloc_lock>
 8002afa:	6833      	ldr	r3, [r6, #0]
 8002afc:	461c      	mov	r4, r3
 8002afe:	bb34      	cbnz	r4, 8002b4e <_malloc_r+0x82>
 8002b00:	4629      	mov	r1, r5
 8002b02:	4638      	mov	r0, r7
 8002b04:	f7ff ffc2 	bl	8002a8c <sbrk_aligned>
 8002b08:	1c43      	adds	r3, r0, #1
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	d14d      	bne.n	8002baa <_malloc_r+0xde>
 8002b0e:	6834      	ldr	r4, [r6, #0]
 8002b10:	4626      	mov	r6, r4
 8002b12:	2e00      	cmp	r6, #0
 8002b14:	d140      	bne.n	8002b98 <_malloc_r+0xcc>
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	4631      	mov	r1, r6
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	eb04 0803 	add.w	r8, r4, r3
 8002b20:	f000 fb36 	bl	8003190 <_sbrk_r>
 8002b24:	4580      	cmp	r8, r0
 8002b26:	d13a      	bne.n	8002b9e <_malloc_r+0xd2>
 8002b28:	6821      	ldr	r1, [r4, #0]
 8002b2a:	3503      	adds	r5, #3
 8002b2c:	1a6d      	subs	r5, r5, r1
 8002b2e:	f025 0503 	bic.w	r5, r5, #3
 8002b32:	3508      	adds	r5, #8
 8002b34:	2d0c      	cmp	r5, #12
 8002b36:	bf38      	it	cc
 8002b38:	250c      	movcc	r5, #12
 8002b3a:	4638      	mov	r0, r7
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	f7ff ffa5 	bl	8002a8c <sbrk_aligned>
 8002b42:	3001      	adds	r0, #1
 8002b44:	d02b      	beq.n	8002b9e <_malloc_r+0xd2>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	442b      	add	r3, r5
 8002b4a:	6023      	str	r3, [r4, #0]
 8002b4c:	e00e      	b.n	8002b6c <_malloc_r+0xa0>
 8002b4e:	6822      	ldr	r2, [r4, #0]
 8002b50:	1b52      	subs	r2, r2, r5
 8002b52:	d41e      	bmi.n	8002b92 <_malloc_r+0xc6>
 8002b54:	2a0b      	cmp	r2, #11
 8002b56:	d916      	bls.n	8002b86 <_malloc_r+0xba>
 8002b58:	1961      	adds	r1, r4, r5
 8002b5a:	42a3      	cmp	r3, r4
 8002b5c:	6025      	str	r5, [r4, #0]
 8002b5e:	bf18      	it	ne
 8002b60:	6059      	strne	r1, [r3, #4]
 8002b62:	6863      	ldr	r3, [r4, #4]
 8002b64:	bf08      	it	eq
 8002b66:	6031      	streq	r1, [r6, #0]
 8002b68:	5162      	str	r2, [r4, r5]
 8002b6a:	604b      	str	r3, [r1, #4]
 8002b6c:	4638      	mov	r0, r7
 8002b6e:	f104 060b 	add.w	r6, r4, #11
 8002b72:	f000 fe15 	bl	80037a0 <__malloc_unlock>
 8002b76:	f026 0607 	bic.w	r6, r6, #7
 8002b7a:	1d23      	adds	r3, r4, #4
 8002b7c:	1af2      	subs	r2, r6, r3
 8002b7e:	d0b6      	beq.n	8002aee <_malloc_r+0x22>
 8002b80:	1b9b      	subs	r3, r3, r6
 8002b82:	50a3      	str	r3, [r4, r2]
 8002b84:	e7b3      	b.n	8002aee <_malloc_r+0x22>
 8002b86:	6862      	ldr	r2, [r4, #4]
 8002b88:	42a3      	cmp	r3, r4
 8002b8a:	bf0c      	ite	eq
 8002b8c:	6032      	streq	r2, [r6, #0]
 8002b8e:	605a      	strne	r2, [r3, #4]
 8002b90:	e7ec      	b.n	8002b6c <_malloc_r+0xa0>
 8002b92:	4623      	mov	r3, r4
 8002b94:	6864      	ldr	r4, [r4, #4]
 8002b96:	e7b2      	b.n	8002afe <_malloc_r+0x32>
 8002b98:	4634      	mov	r4, r6
 8002b9a:	6876      	ldr	r6, [r6, #4]
 8002b9c:	e7b9      	b.n	8002b12 <_malloc_r+0x46>
 8002b9e:	230c      	movs	r3, #12
 8002ba0:	4638      	mov	r0, r7
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	f000 fdfc 	bl	80037a0 <__malloc_unlock>
 8002ba8:	e7a1      	b.n	8002aee <_malloc_r+0x22>
 8002baa:	6025      	str	r5, [r4, #0]
 8002bac:	e7de      	b.n	8002b6c <_malloc_r+0xa0>
 8002bae:	bf00      	nop
 8002bb0:	20000124 	.word	0x20000124

08002bb4 <__sfputc_r>:
 8002bb4:	6893      	ldr	r3, [r2, #8]
 8002bb6:	b410      	push	{r4}
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	6093      	str	r3, [r2, #8]
 8002bbe:	da07      	bge.n	8002bd0 <__sfputc_r+0x1c>
 8002bc0:	6994      	ldr	r4, [r2, #24]
 8002bc2:	42a3      	cmp	r3, r4
 8002bc4:	db01      	blt.n	8002bca <__sfputc_r+0x16>
 8002bc6:	290a      	cmp	r1, #10
 8002bc8:	d102      	bne.n	8002bd0 <__sfputc_r+0x1c>
 8002bca:	bc10      	pop	{r4}
 8002bcc:	f000 baf0 	b.w	80031b0 <__swbuf_r>
 8002bd0:	6813      	ldr	r3, [r2, #0]
 8002bd2:	1c58      	adds	r0, r3, #1
 8002bd4:	6010      	str	r0, [r2, #0]
 8002bd6:	7019      	strb	r1, [r3, #0]
 8002bd8:	4608      	mov	r0, r1
 8002bda:	bc10      	pop	{r4}
 8002bdc:	4770      	bx	lr

08002bde <__sfputs_r>:
 8002bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be0:	4606      	mov	r6, r0
 8002be2:	460f      	mov	r7, r1
 8002be4:	4614      	mov	r4, r2
 8002be6:	18d5      	adds	r5, r2, r3
 8002be8:	42ac      	cmp	r4, r5
 8002bea:	d101      	bne.n	8002bf0 <__sfputs_r+0x12>
 8002bec:	2000      	movs	r0, #0
 8002bee:	e007      	b.n	8002c00 <__sfputs_r+0x22>
 8002bf0:	463a      	mov	r2, r7
 8002bf2:	4630      	mov	r0, r6
 8002bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bf8:	f7ff ffdc 	bl	8002bb4 <__sfputc_r>
 8002bfc:	1c43      	adds	r3, r0, #1
 8002bfe:	d1f3      	bne.n	8002be8 <__sfputs_r+0xa>
 8002c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c04 <_vfiprintf_r>:
 8002c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c08:	460d      	mov	r5, r1
 8002c0a:	4614      	mov	r4, r2
 8002c0c:	4698      	mov	r8, r3
 8002c0e:	4606      	mov	r6, r0
 8002c10:	b09d      	sub	sp, #116	; 0x74
 8002c12:	b118      	cbz	r0, 8002c1c <_vfiprintf_r+0x18>
 8002c14:	6983      	ldr	r3, [r0, #24]
 8002c16:	b90b      	cbnz	r3, 8002c1c <_vfiprintf_r+0x18>
 8002c18:	f000 fca8 	bl	800356c <__sinit>
 8002c1c:	4b89      	ldr	r3, [pc, #548]	; (8002e44 <_vfiprintf_r+0x240>)
 8002c1e:	429d      	cmp	r5, r3
 8002c20:	d11b      	bne.n	8002c5a <_vfiprintf_r+0x56>
 8002c22:	6875      	ldr	r5, [r6, #4]
 8002c24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c26:	07d9      	lsls	r1, r3, #31
 8002c28:	d405      	bmi.n	8002c36 <_vfiprintf_r+0x32>
 8002c2a:	89ab      	ldrh	r3, [r5, #12]
 8002c2c:	059a      	lsls	r2, r3, #22
 8002c2e:	d402      	bmi.n	8002c36 <_vfiprintf_r+0x32>
 8002c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c32:	f000 fd39 	bl	80036a8 <__retarget_lock_acquire_recursive>
 8002c36:	89ab      	ldrh	r3, [r5, #12]
 8002c38:	071b      	lsls	r3, r3, #28
 8002c3a:	d501      	bpl.n	8002c40 <_vfiprintf_r+0x3c>
 8002c3c:	692b      	ldr	r3, [r5, #16]
 8002c3e:	b9eb      	cbnz	r3, 8002c7c <_vfiprintf_r+0x78>
 8002c40:	4629      	mov	r1, r5
 8002c42:	4630      	mov	r0, r6
 8002c44:	f000 fb06 	bl	8003254 <__swsetup_r>
 8002c48:	b1c0      	cbz	r0, 8002c7c <_vfiprintf_r+0x78>
 8002c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c4c:	07dc      	lsls	r4, r3, #31
 8002c4e:	d50e      	bpl.n	8002c6e <_vfiprintf_r+0x6a>
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295
 8002c54:	b01d      	add	sp, #116	; 0x74
 8002c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c5a:	4b7b      	ldr	r3, [pc, #492]	; (8002e48 <_vfiprintf_r+0x244>)
 8002c5c:	429d      	cmp	r5, r3
 8002c5e:	d101      	bne.n	8002c64 <_vfiprintf_r+0x60>
 8002c60:	68b5      	ldr	r5, [r6, #8]
 8002c62:	e7df      	b.n	8002c24 <_vfiprintf_r+0x20>
 8002c64:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <_vfiprintf_r+0x248>)
 8002c66:	429d      	cmp	r5, r3
 8002c68:	bf08      	it	eq
 8002c6a:	68f5      	ldreq	r5, [r6, #12]
 8002c6c:	e7da      	b.n	8002c24 <_vfiprintf_r+0x20>
 8002c6e:	89ab      	ldrh	r3, [r5, #12]
 8002c70:	0598      	lsls	r0, r3, #22
 8002c72:	d4ed      	bmi.n	8002c50 <_vfiprintf_r+0x4c>
 8002c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c76:	f000 fd18 	bl	80036aa <__retarget_lock_release_recursive>
 8002c7a:	e7e9      	b.n	8002c50 <_vfiprintf_r+0x4c>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8002c80:	2320      	movs	r3, #32
 8002c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c86:	2330      	movs	r3, #48	; 0x30
 8002c88:	f04f 0901 	mov.w	r9, #1
 8002c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002e50 <_vfiprintf_r+0x24c>
 8002c94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c98:	4623      	mov	r3, r4
 8002c9a:	469a      	mov	sl, r3
 8002c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ca0:	b10a      	cbz	r2, 8002ca6 <_vfiprintf_r+0xa2>
 8002ca2:	2a25      	cmp	r2, #37	; 0x25
 8002ca4:	d1f9      	bne.n	8002c9a <_vfiprintf_r+0x96>
 8002ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8002caa:	d00b      	beq.n	8002cc4 <_vfiprintf_r+0xc0>
 8002cac:	465b      	mov	r3, fp
 8002cae:	4622      	mov	r2, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	f7ff ff93 	bl	8002bde <__sfputs_r>
 8002cb8:	3001      	adds	r0, #1
 8002cba:	f000 80aa 	beq.w	8002e12 <_vfiprintf_r+0x20e>
 8002cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cc0:	445a      	add	r2, fp
 8002cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8002cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80a2 	beq.w	8002e12 <_vfiprintf_r+0x20e>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cd8:	f10a 0a01 	add.w	sl, sl, #1
 8002cdc:	9304      	str	r3, [sp, #16]
 8002cde:	9307      	str	r3, [sp, #28]
 8002ce0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ce4:	931a      	str	r3, [sp, #104]	; 0x68
 8002ce6:	4654      	mov	r4, sl
 8002ce8:	2205      	movs	r2, #5
 8002cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cee:	4858      	ldr	r0, [pc, #352]	; (8002e50 <_vfiprintf_r+0x24c>)
 8002cf0:	f000 fd42 	bl	8003778 <memchr>
 8002cf4:	9a04      	ldr	r2, [sp, #16]
 8002cf6:	b9d8      	cbnz	r0, 8002d30 <_vfiprintf_r+0x12c>
 8002cf8:	06d1      	lsls	r1, r2, #27
 8002cfa:	bf44      	itt	mi
 8002cfc:	2320      	movmi	r3, #32
 8002cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d02:	0713      	lsls	r3, r2, #28
 8002d04:	bf44      	itt	mi
 8002d06:	232b      	movmi	r3, #43	; 0x2b
 8002d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d10:	2b2a      	cmp	r3, #42	; 0x2a
 8002d12:	d015      	beq.n	8002d40 <_vfiprintf_r+0x13c>
 8002d14:	4654      	mov	r4, sl
 8002d16:	2000      	movs	r0, #0
 8002d18:	f04f 0c0a 	mov.w	ip, #10
 8002d1c:	9a07      	ldr	r2, [sp, #28]
 8002d1e:	4621      	mov	r1, r4
 8002d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d24:	3b30      	subs	r3, #48	; 0x30
 8002d26:	2b09      	cmp	r3, #9
 8002d28:	d94e      	bls.n	8002dc8 <_vfiprintf_r+0x1c4>
 8002d2a:	b1b0      	cbz	r0, 8002d5a <_vfiprintf_r+0x156>
 8002d2c:	9207      	str	r2, [sp, #28]
 8002d2e:	e014      	b.n	8002d5a <_vfiprintf_r+0x156>
 8002d30:	eba0 0308 	sub.w	r3, r0, r8
 8002d34:	fa09 f303 	lsl.w	r3, r9, r3
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	46a2      	mov	sl, r4
 8002d3c:	9304      	str	r3, [sp, #16]
 8002d3e:	e7d2      	b.n	8002ce6 <_vfiprintf_r+0xe2>
 8002d40:	9b03      	ldr	r3, [sp, #12]
 8002d42:	1d19      	adds	r1, r3, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	9103      	str	r1, [sp, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bfbb      	ittet	lt
 8002d4c:	425b      	neglt	r3, r3
 8002d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8002d52:	9307      	strge	r3, [sp, #28]
 8002d54:	9307      	strlt	r3, [sp, #28]
 8002d56:	bfb8      	it	lt
 8002d58:	9204      	strlt	r2, [sp, #16]
 8002d5a:	7823      	ldrb	r3, [r4, #0]
 8002d5c:	2b2e      	cmp	r3, #46	; 0x2e
 8002d5e:	d10c      	bne.n	8002d7a <_vfiprintf_r+0x176>
 8002d60:	7863      	ldrb	r3, [r4, #1]
 8002d62:	2b2a      	cmp	r3, #42	; 0x2a
 8002d64:	d135      	bne.n	8002dd2 <_vfiprintf_r+0x1ce>
 8002d66:	9b03      	ldr	r3, [sp, #12]
 8002d68:	3402      	adds	r4, #2
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	9203      	str	r2, [sp, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bfb8      	it	lt
 8002d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d78:	9305      	str	r3, [sp, #20]
 8002d7a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002e54 <_vfiprintf_r+0x250>
 8002d7e:	2203      	movs	r2, #3
 8002d80:	4650      	mov	r0, sl
 8002d82:	7821      	ldrb	r1, [r4, #0]
 8002d84:	f000 fcf8 	bl	8003778 <memchr>
 8002d88:	b140      	cbz	r0, 8002d9c <_vfiprintf_r+0x198>
 8002d8a:	2340      	movs	r3, #64	; 0x40
 8002d8c:	eba0 000a 	sub.w	r0, r0, sl
 8002d90:	fa03 f000 	lsl.w	r0, r3, r0
 8002d94:	9b04      	ldr	r3, [sp, #16]
 8002d96:	3401      	adds	r4, #1
 8002d98:	4303      	orrs	r3, r0
 8002d9a:	9304      	str	r3, [sp, #16]
 8002d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002da0:	2206      	movs	r2, #6
 8002da2:	482d      	ldr	r0, [pc, #180]	; (8002e58 <_vfiprintf_r+0x254>)
 8002da4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002da8:	f000 fce6 	bl	8003778 <memchr>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d03f      	beq.n	8002e30 <_vfiprintf_r+0x22c>
 8002db0:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <_vfiprintf_r+0x258>)
 8002db2:	bb1b      	cbnz	r3, 8002dfc <_vfiprintf_r+0x1f8>
 8002db4:	9b03      	ldr	r3, [sp, #12]
 8002db6:	3307      	adds	r3, #7
 8002db8:	f023 0307 	bic.w	r3, r3, #7
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	9303      	str	r3, [sp, #12]
 8002dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dc2:	443b      	add	r3, r7
 8002dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002dc6:	e767      	b.n	8002c98 <_vfiprintf_r+0x94>
 8002dc8:	460c      	mov	r4, r1
 8002dca:	2001      	movs	r0, #1
 8002dcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dd0:	e7a5      	b.n	8002d1e <_vfiprintf_r+0x11a>
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f04f 0c0a 	mov.w	ip, #10
 8002dd8:	4619      	mov	r1, r3
 8002dda:	3401      	adds	r4, #1
 8002ddc:	9305      	str	r3, [sp, #20]
 8002dde:	4620      	mov	r0, r4
 8002de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002de4:	3a30      	subs	r2, #48	; 0x30
 8002de6:	2a09      	cmp	r2, #9
 8002de8:	d903      	bls.n	8002df2 <_vfiprintf_r+0x1ee>
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0c5      	beq.n	8002d7a <_vfiprintf_r+0x176>
 8002dee:	9105      	str	r1, [sp, #20]
 8002df0:	e7c3      	b.n	8002d7a <_vfiprintf_r+0x176>
 8002df2:	4604      	mov	r4, r0
 8002df4:	2301      	movs	r3, #1
 8002df6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dfa:	e7f0      	b.n	8002dde <_vfiprintf_r+0x1da>
 8002dfc:	ab03      	add	r3, sp, #12
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	462a      	mov	r2, r5
 8002e02:	4630      	mov	r0, r6
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <_vfiprintf_r+0x25c>)
 8002e06:	a904      	add	r1, sp, #16
 8002e08:	f3af 8000 	nop.w
 8002e0c:	4607      	mov	r7, r0
 8002e0e:	1c78      	adds	r0, r7, #1
 8002e10:	d1d6      	bne.n	8002dc0 <_vfiprintf_r+0x1bc>
 8002e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e14:	07d9      	lsls	r1, r3, #31
 8002e16:	d405      	bmi.n	8002e24 <_vfiprintf_r+0x220>
 8002e18:	89ab      	ldrh	r3, [r5, #12]
 8002e1a:	059a      	lsls	r2, r3, #22
 8002e1c:	d402      	bmi.n	8002e24 <_vfiprintf_r+0x220>
 8002e1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e20:	f000 fc43 	bl	80036aa <__retarget_lock_release_recursive>
 8002e24:	89ab      	ldrh	r3, [r5, #12]
 8002e26:	065b      	lsls	r3, r3, #25
 8002e28:	f53f af12 	bmi.w	8002c50 <_vfiprintf_r+0x4c>
 8002e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e2e:	e711      	b.n	8002c54 <_vfiprintf_r+0x50>
 8002e30:	ab03      	add	r3, sp, #12
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	462a      	mov	r2, r5
 8002e36:	4630      	mov	r0, r6
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <_vfiprintf_r+0x25c>)
 8002e3a:	a904      	add	r1, sp, #16
 8002e3c:	f000 f882 	bl	8002f44 <_printf_i>
 8002e40:	e7e4      	b.n	8002e0c <_vfiprintf_r+0x208>
 8002e42:	bf00      	nop
 8002e44:	08003acc 	.word	0x08003acc
 8002e48:	08003aec 	.word	0x08003aec
 8002e4c:	08003aac 	.word	0x08003aac
 8002e50:	08003a76 	.word	0x08003a76
 8002e54:	08003a7c 	.word	0x08003a7c
 8002e58:	08003a80 	.word	0x08003a80
 8002e5c:	00000000 	.word	0x00000000
 8002e60:	08002bdf 	.word	0x08002bdf

08002e64 <_printf_common>:
 8002e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e68:	4616      	mov	r6, r2
 8002e6a:	4699      	mov	r9, r3
 8002e6c:	688a      	ldr	r2, [r1, #8]
 8002e6e:	690b      	ldr	r3, [r1, #16]
 8002e70:	4607      	mov	r7, r0
 8002e72:	4293      	cmp	r3, r2
 8002e74:	bfb8      	it	lt
 8002e76:	4613      	movlt	r3, r2
 8002e78:	6033      	str	r3, [r6, #0]
 8002e7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e7e:	460c      	mov	r4, r1
 8002e80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e84:	b10a      	cbz	r2, 8002e8a <_printf_common+0x26>
 8002e86:	3301      	adds	r3, #1
 8002e88:	6033      	str	r3, [r6, #0]
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	0699      	lsls	r1, r3, #26
 8002e8e:	bf42      	ittt	mi
 8002e90:	6833      	ldrmi	r3, [r6, #0]
 8002e92:	3302      	addmi	r3, #2
 8002e94:	6033      	strmi	r3, [r6, #0]
 8002e96:	6825      	ldr	r5, [r4, #0]
 8002e98:	f015 0506 	ands.w	r5, r5, #6
 8002e9c:	d106      	bne.n	8002eac <_printf_common+0x48>
 8002e9e:	f104 0a19 	add.w	sl, r4, #25
 8002ea2:	68e3      	ldr	r3, [r4, #12]
 8002ea4:	6832      	ldr	r2, [r6, #0]
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	42ab      	cmp	r3, r5
 8002eaa:	dc28      	bgt.n	8002efe <_printf_common+0x9a>
 8002eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002eb0:	1e13      	subs	r3, r2, #0
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	bf18      	it	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	0692      	lsls	r2, r2, #26
 8002eba:	d42d      	bmi.n	8002f18 <_printf_common+0xb4>
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ec4:	47c0      	blx	r8
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	d020      	beq.n	8002f0c <_printf_common+0xa8>
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	68e5      	ldr	r5, [r4, #12]
 8002ece:	f003 0306 	and.w	r3, r3, #6
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	bf18      	it	ne
 8002ed6:	2500      	movne	r5, #0
 8002ed8:	6832      	ldr	r2, [r6, #0]
 8002eda:	f04f 0600 	mov.w	r6, #0
 8002ede:	68a3      	ldr	r3, [r4, #8]
 8002ee0:	bf08      	it	eq
 8002ee2:	1aad      	subeq	r5, r5, r2
 8002ee4:	6922      	ldr	r2, [r4, #16]
 8002ee6:	bf08      	it	eq
 8002ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bfc4      	itt	gt
 8002ef0:	1a9b      	subgt	r3, r3, r2
 8002ef2:	18ed      	addgt	r5, r5, r3
 8002ef4:	341a      	adds	r4, #26
 8002ef6:	42b5      	cmp	r5, r6
 8002ef8:	d11a      	bne.n	8002f30 <_printf_common+0xcc>
 8002efa:	2000      	movs	r0, #0
 8002efc:	e008      	b.n	8002f10 <_printf_common+0xac>
 8002efe:	2301      	movs	r3, #1
 8002f00:	4652      	mov	r2, sl
 8002f02:	4649      	mov	r1, r9
 8002f04:	4638      	mov	r0, r7
 8002f06:	47c0      	blx	r8
 8002f08:	3001      	adds	r0, #1
 8002f0a:	d103      	bne.n	8002f14 <_printf_common+0xb0>
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f14:	3501      	adds	r5, #1
 8002f16:	e7c4      	b.n	8002ea2 <_printf_common+0x3e>
 8002f18:	2030      	movs	r0, #48	; 0x30
 8002f1a:	18e1      	adds	r1, r4, r3
 8002f1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f26:	4422      	add	r2, r4
 8002f28:	3302      	adds	r3, #2
 8002f2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f2e:	e7c5      	b.n	8002ebc <_printf_common+0x58>
 8002f30:	2301      	movs	r3, #1
 8002f32:	4622      	mov	r2, r4
 8002f34:	4649      	mov	r1, r9
 8002f36:	4638      	mov	r0, r7
 8002f38:	47c0      	blx	r8
 8002f3a:	3001      	adds	r0, #1
 8002f3c:	d0e6      	beq.n	8002f0c <_printf_common+0xa8>
 8002f3e:	3601      	adds	r6, #1
 8002f40:	e7d9      	b.n	8002ef6 <_printf_common+0x92>
	...

08002f44 <_printf_i>:
 8002f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f48:	7e0f      	ldrb	r7, [r1, #24]
 8002f4a:	4691      	mov	r9, r2
 8002f4c:	2f78      	cmp	r7, #120	; 0x78
 8002f4e:	4680      	mov	r8, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	469a      	mov	sl, r3
 8002f54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f5a:	d807      	bhi.n	8002f6c <_printf_i+0x28>
 8002f5c:	2f62      	cmp	r7, #98	; 0x62
 8002f5e:	d80a      	bhi.n	8002f76 <_printf_i+0x32>
 8002f60:	2f00      	cmp	r7, #0
 8002f62:	f000 80d9 	beq.w	8003118 <_printf_i+0x1d4>
 8002f66:	2f58      	cmp	r7, #88	; 0x58
 8002f68:	f000 80a4 	beq.w	80030b4 <_printf_i+0x170>
 8002f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f74:	e03a      	b.n	8002fec <_printf_i+0xa8>
 8002f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f7a:	2b15      	cmp	r3, #21
 8002f7c:	d8f6      	bhi.n	8002f6c <_printf_i+0x28>
 8002f7e:	a101      	add	r1, pc, #4	; (adr r1, 8002f84 <_printf_i+0x40>)
 8002f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f84:	08002fdd 	.word	0x08002fdd
 8002f88:	08002ff1 	.word	0x08002ff1
 8002f8c:	08002f6d 	.word	0x08002f6d
 8002f90:	08002f6d 	.word	0x08002f6d
 8002f94:	08002f6d 	.word	0x08002f6d
 8002f98:	08002f6d 	.word	0x08002f6d
 8002f9c:	08002ff1 	.word	0x08002ff1
 8002fa0:	08002f6d 	.word	0x08002f6d
 8002fa4:	08002f6d 	.word	0x08002f6d
 8002fa8:	08002f6d 	.word	0x08002f6d
 8002fac:	08002f6d 	.word	0x08002f6d
 8002fb0:	080030ff 	.word	0x080030ff
 8002fb4:	08003021 	.word	0x08003021
 8002fb8:	080030e1 	.word	0x080030e1
 8002fbc:	08002f6d 	.word	0x08002f6d
 8002fc0:	08002f6d 	.word	0x08002f6d
 8002fc4:	08003121 	.word	0x08003121
 8002fc8:	08002f6d 	.word	0x08002f6d
 8002fcc:	08003021 	.word	0x08003021
 8002fd0:	08002f6d 	.word	0x08002f6d
 8002fd4:	08002f6d 	.word	0x08002f6d
 8002fd8:	080030e9 	.word	0x080030e9
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	1d1a      	adds	r2, r3, #4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	602a      	str	r2, [r5, #0]
 8002fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0a4      	b.n	800313a <_printf_i+0x1f6>
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	6829      	ldr	r1, [r5, #0]
 8002ff4:	0606      	lsls	r6, r0, #24
 8002ff6:	f101 0304 	add.w	r3, r1, #4
 8002ffa:	d50a      	bpl.n	8003012 <_printf_i+0xce>
 8002ffc:	680e      	ldr	r6, [r1, #0]
 8002ffe:	602b      	str	r3, [r5, #0]
 8003000:	2e00      	cmp	r6, #0
 8003002:	da03      	bge.n	800300c <_printf_i+0xc8>
 8003004:	232d      	movs	r3, #45	; 0x2d
 8003006:	4276      	negs	r6, r6
 8003008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800300c:	230a      	movs	r3, #10
 800300e:	485e      	ldr	r0, [pc, #376]	; (8003188 <_printf_i+0x244>)
 8003010:	e019      	b.n	8003046 <_printf_i+0x102>
 8003012:	680e      	ldr	r6, [r1, #0]
 8003014:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003018:	602b      	str	r3, [r5, #0]
 800301a:	bf18      	it	ne
 800301c:	b236      	sxthne	r6, r6
 800301e:	e7ef      	b.n	8003000 <_printf_i+0xbc>
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	6820      	ldr	r0, [r4, #0]
 8003024:	1d19      	adds	r1, r3, #4
 8003026:	6029      	str	r1, [r5, #0]
 8003028:	0601      	lsls	r1, r0, #24
 800302a:	d501      	bpl.n	8003030 <_printf_i+0xec>
 800302c:	681e      	ldr	r6, [r3, #0]
 800302e:	e002      	b.n	8003036 <_printf_i+0xf2>
 8003030:	0646      	lsls	r6, r0, #25
 8003032:	d5fb      	bpl.n	800302c <_printf_i+0xe8>
 8003034:	881e      	ldrh	r6, [r3, #0]
 8003036:	2f6f      	cmp	r7, #111	; 0x6f
 8003038:	bf0c      	ite	eq
 800303a:	2308      	moveq	r3, #8
 800303c:	230a      	movne	r3, #10
 800303e:	4852      	ldr	r0, [pc, #328]	; (8003188 <_printf_i+0x244>)
 8003040:	2100      	movs	r1, #0
 8003042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003046:	6865      	ldr	r5, [r4, #4]
 8003048:	2d00      	cmp	r5, #0
 800304a:	bfa8      	it	ge
 800304c:	6821      	ldrge	r1, [r4, #0]
 800304e:	60a5      	str	r5, [r4, #8]
 8003050:	bfa4      	itt	ge
 8003052:	f021 0104 	bicge.w	r1, r1, #4
 8003056:	6021      	strge	r1, [r4, #0]
 8003058:	b90e      	cbnz	r6, 800305e <_printf_i+0x11a>
 800305a:	2d00      	cmp	r5, #0
 800305c:	d04d      	beq.n	80030fa <_printf_i+0x1b6>
 800305e:	4615      	mov	r5, r2
 8003060:	fbb6 f1f3 	udiv	r1, r6, r3
 8003064:	fb03 6711 	mls	r7, r3, r1, r6
 8003068:	5dc7      	ldrb	r7, [r0, r7]
 800306a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800306e:	4637      	mov	r7, r6
 8003070:	42bb      	cmp	r3, r7
 8003072:	460e      	mov	r6, r1
 8003074:	d9f4      	bls.n	8003060 <_printf_i+0x11c>
 8003076:	2b08      	cmp	r3, #8
 8003078:	d10b      	bne.n	8003092 <_printf_i+0x14e>
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	07de      	lsls	r6, r3, #31
 800307e:	d508      	bpl.n	8003092 <_printf_i+0x14e>
 8003080:	6923      	ldr	r3, [r4, #16]
 8003082:	6861      	ldr	r1, [r4, #4]
 8003084:	4299      	cmp	r1, r3
 8003086:	bfde      	ittt	le
 8003088:	2330      	movle	r3, #48	; 0x30
 800308a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800308e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003092:	1b52      	subs	r2, r2, r5
 8003094:	6122      	str	r2, [r4, #16]
 8003096:	464b      	mov	r3, r9
 8003098:	4621      	mov	r1, r4
 800309a:	4640      	mov	r0, r8
 800309c:	f8cd a000 	str.w	sl, [sp]
 80030a0:	aa03      	add	r2, sp, #12
 80030a2:	f7ff fedf 	bl	8002e64 <_printf_common>
 80030a6:	3001      	adds	r0, #1
 80030a8:	d14c      	bne.n	8003144 <_printf_i+0x200>
 80030aa:	f04f 30ff 	mov.w	r0, #4294967295
 80030ae:	b004      	add	sp, #16
 80030b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b4:	4834      	ldr	r0, [pc, #208]	; (8003188 <_printf_i+0x244>)
 80030b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030ba:	6829      	ldr	r1, [r5, #0]
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	f851 6b04 	ldr.w	r6, [r1], #4
 80030c2:	6029      	str	r1, [r5, #0]
 80030c4:	061d      	lsls	r5, r3, #24
 80030c6:	d514      	bpl.n	80030f2 <_printf_i+0x1ae>
 80030c8:	07df      	lsls	r7, r3, #31
 80030ca:	bf44      	itt	mi
 80030cc:	f043 0320 	orrmi.w	r3, r3, #32
 80030d0:	6023      	strmi	r3, [r4, #0]
 80030d2:	b91e      	cbnz	r6, 80030dc <_printf_i+0x198>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	f023 0320 	bic.w	r3, r3, #32
 80030da:	6023      	str	r3, [r4, #0]
 80030dc:	2310      	movs	r3, #16
 80030de:	e7af      	b.n	8003040 <_printf_i+0xfc>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f043 0320 	orr.w	r3, r3, #32
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	2378      	movs	r3, #120	; 0x78
 80030ea:	4828      	ldr	r0, [pc, #160]	; (800318c <_printf_i+0x248>)
 80030ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030f0:	e7e3      	b.n	80030ba <_printf_i+0x176>
 80030f2:	0659      	lsls	r1, r3, #25
 80030f4:	bf48      	it	mi
 80030f6:	b2b6      	uxthmi	r6, r6
 80030f8:	e7e6      	b.n	80030c8 <_printf_i+0x184>
 80030fa:	4615      	mov	r5, r2
 80030fc:	e7bb      	b.n	8003076 <_printf_i+0x132>
 80030fe:	682b      	ldr	r3, [r5, #0]
 8003100:	6826      	ldr	r6, [r4, #0]
 8003102:	1d18      	adds	r0, r3, #4
 8003104:	6961      	ldr	r1, [r4, #20]
 8003106:	6028      	str	r0, [r5, #0]
 8003108:	0635      	lsls	r5, r6, #24
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	d501      	bpl.n	8003112 <_printf_i+0x1ce>
 800310e:	6019      	str	r1, [r3, #0]
 8003110:	e002      	b.n	8003118 <_printf_i+0x1d4>
 8003112:	0670      	lsls	r0, r6, #25
 8003114:	d5fb      	bpl.n	800310e <_printf_i+0x1ca>
 8003116:	8019      	strh	r1, [r3, #0]
 8003118:	2300      	movs	r3, #0
 800311a:	4615      	mov	r5, r2
 800311c:	6123      	str	r3, [r4, #16]
 800311e:	e7ba      	b.n	8003096 <_printf_i+0x152>
 8003120:	682b      	ldr	r3, [r5, #0]
 8003122:	2100      	movs	r1, #0
 8003124:	1d1a      	adds	r2, r3, #4
 8003126:	602a      	str	r2, [r5, #0]
 8003128:	681d      	ldr	r5, [r3, #0]
 800312a:	6862      	ldr	r2, [r4, #4]
 800312c:	4628      	mov	r0, r5
 800312e:	f000 fb23 	bl	8003778 <memchr>
 8003132:	b108      	cbz	r0, 8003138 <_printf_i+0x1f4>
 8003134:	1b40      	subs	r0, r0, r5
 8003136:	6060      	str	r0, [r4, #4]
 8003138:	6863      	ldr	r3, [r4, #4]
 800313a:	6123      	str	r3, [r4, #16]
 800313c:	2300      	movs	r3, #0
 800313e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003142:	e7a8      	b.n	8003096 <_printf_i+0x152>
 8003144:	462a      	mov	r2, r5
 8003146:	4649      	mov	r1, r9
 8003148:	4640      	mov	r0, r8
 800314a:	6923      	ldr	r3, [r4, #16]
 800314c:	47d0      	blx	sl
 800314e:	3001      	adds	r0, #1
 8003150:	d0ab      	beq.n	80030aa <_printf_i+0x166>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	079b      	lsls	r3, r3, #30
 8003156:	d413      	bmi.n	8003180 <_printf_i+0x23c>
 8003158:	68e0      	ldr	r0, [r4, #12]
 800315a:	9b03      	ldr	r3, [sp, #12]
 800315c:	4298      	cmp	r0, r3
 800315e:	bfb8      	it	lt
 8003160:	4618      	movlt	r0, r3
 8003162:	e7a4      	b.n	80030ae <_printf_i+0x16a>
 8003164:	2301      	movs	r3, #1
 8003166:	4632      	mov	r2, r6
 8003168:	4649      	mov	r1, r9
 800316a:	4640      	mov	r0, r8
 800316c:	47d0      	blx	sl
 800316e:	3001      	adds	r0, #1
 8003170:	d09b      	beq.n	80030aa <_printf_i+0x166>
 8003172:	3501      	adds	r5, #1
 8003174:	68e3      	ldr	r3, [r4, #12]
 8003176:	9903      	ldr	r1, [sp, #12]
 8003178:	1a5b      	subs	r3, r3, r1
 800317a:	42ab      	cmp	r3, r5
 800317c:	dcf2      	bgt.n	8003164 <_printf_i+0x220>
 800317e:	e7eb      	b.n	8003158 <_printf_i+0x214>
 8003180:	2500      	movs	r5, #0
 8003182:	f104 0619 	add.w	r6, r4, #25
 8003186:	e7f5      	b.n	8003174 <_printf_i+0x230>
 8003188:	08003a87 	.word	0x08003a87
 800318c:	08003a98 	.word	0x08003a98

08003190 <_sbrk_r>:
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	2300      	movs	r3, #0
 8003194:	4d05      	ldr	r5, [pc, #20]	; (80031ac <_sbrk_r+0x1c>)
 8003196:	4604      	mov	r4, r0
 8003198:	4608      	mov	r0, r1
 800319a:	602b      	str	r3, [r5, #0]
 800319c:	f7ff faf6 	bl	800278c <_sbrk>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d102      	bne.n	80031aa <_sbrk_r+0x1a>
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	b103      	cbz	r3, 80031aa <_sbrk_r+0x1a>
 80031a8:	6023      	str	r3, [r4, #0]
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
 80031ac:	20000130 	.word	0x20000130

080031b0 <__swbuf_r>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	460e      	mov	r6, r1
 80031b4:	4614      	mov	r4, r2
 80031b6:	4605      	mov	r5, r0
 80031b8:	b118      	cbz	r0, 80031c2 <__swbuf_r+0x12>
 80031ba:	6983      	ldr	r3, [r0, #24]
 80031bc:	b90b      	cbnz	r3, 80031c2 <__swbuf_r+0x12>
 80031be:	f000 f9d5 	bl	800356c <__sinit>
 80031c2:	4b21      	ldr	r3, [pc, #132]	; (8003248 <__swbuf_r+0x98>)
 80031c4:	429c      	cmp	r4, r3
 80031c6:	d12b      	bne.n	8003220 <__swbuf_r+0x70>
 80031c8:	686c      	ldr	r4, [r5, #4]
 80031ca:	69a3      	ldr	r3, [r4, #24]
 80031cc:	60a3      	str	r3, [r4, #8]
 80031ce:	89a3      	ldrh	r3, [r4, #12]
 80031d0:	071a      	lsls	r2, r3, #28
 80031d2:	d52f      	bpl.n	8003234 <__swbuf_r+0x84>
 80031d4:	6923      	ldr	r3, [r4, #16]
 80031d6:	b36b      	cbz	r3, 8003234 <__swbuf_r+0x84>
 80031d8:	6923      	ldr	r3, [r4, #16]
 80031da:	6820      	ldr	r0, [r4, #0]
 80031dc:	b2f6      	uxtb	r6, r6
 80031de:	1ac0      	subs	r0, r0, r3
 80031e0:	6963      	ldr	r3, [r4, #20]
 80031e2:	4637      	mov	r7, r6
 80031e4:	4283      	cmp	r3, r0
 80031e6:	dc04      	bgt.n	80031f2 <__swbuf_r+0x42>
 80031e8:	4621      	mov	r1, r4
 80031ea:	4628      	mov	r0, r5
 80031ec:	f000 f92a 	bl	8003444 <_fflush_r>
 80031f0:	bb30      	cbnz	r0, 8003240 <__swbuf_r+0x90>
 80031f2:	68a3      	ldr	r3, [r4, #8]
 80031f4:	3001      	adds	r0, #1
 80031f6:	3b01      	subs	r3, #1
 80031f8:	60a3      	str	r3, [r4, #8]
 80031fa:	6823      	ldr	r3, [r4, #0]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	6022      	str	r2, [r4, #0]
 8003200:	701e      	strb	r6, [r3, #0]
 8003202:	6963      	ldr	r3, [r4, #20]
 8003204:	4283      	cmp	r3, r0
 8003206:	d004      	beq.n	8003212 <__swbuf_r+0x62>
 8003208:	89a3      	ldrh	r3, [r4, #12]
 800320a:	07db      	lsls	r3, r3, #31
 800320c:	d506      	bpl.n	800321c <__swbuf_r+0x6c>
 800320e:	2e0a      	cmp	r6, #10
 8003210:	d104      	bne.n	800321c <__swbuf_r+0x6c>
 8003212:	4621      	mov	r1, r4
 8003214:	4628      	mov	r0, r5
 8003216:	f000 f915 	bl	8003444 <_fflush_r>
 800321a:	b988      	cbnz	r0, 8003240 <__swbuf_r+0x90>
 800321c:	4638      	mov	r0, r7
 800321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <__swbuf_r+0x9c>)
 8003222:	429c      	cmp	r4, r3
 8003224:	d101      	bne.n	800322a <__swbuf_r+0x7a>
 8003226:	68ac      	ldr	r4, [r5, #8]
 8003228:	e7cf      	b.n	80031ca <__swbuf_r+0x1a>
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <__swbuf_r+0xa0>)
 800322c:	429c      	cmp	r4, r3
 800322e:	bf08      	it	eq
 8003230:	68ec      	ldreq	r4, [r5, #12]
 8003232:	e7ca      	b.n	80031ca <__swbuf_r+0x1a>
 8003234:	4621      	mov	r1, r4
 8003236:	4628      	mov	r0, r5
 8003238:	f000 f80c 	bl	8003254 <__swsetup_r>
 800323c:	2800      	cmp	r0, #0
 800323e:	d0cb      	beq.n	80031d8 <__swbuf_r+0x28>
 8003240:	f04f 37ff 	mov.w	r7, #4294967295
 8003244:	e7ea      	b.n	800321c <__swbuf_r+0x6c>
 8003246:	bf00      	nop
 8003248:	08003acc 	.word	0x08003acc
 800324c:	08003aec 	.word	0x08003aec
 8003250:	08003aac 	.word	0x08003aac

08003254 <__swsetup_r>:
 8003254:	4b32      	ldr	r3, [pc, #200]	; (8003320 <__swsetup_r+0xcc>)
 8003256:	b570      	push	{r4, r5, r6, lr}
 8003258:	681d      	ldr	r5, [r3, #0]
 800325a:	4606      	mov	r6, r0
 800325c:	460c      	mov	r4, r1
 800325e:	b125      	cbz	r5, 800326a <__swsetup_r+0x16>
 8003260:	69ab      	ldr	r3, [r5, #24]
 8003262:	b913      	cbnz	r3, 800326a <__swsetup_r+0x16>
 8003264:	4628      	mov	r0, r5
 8003266:	f000 f981 	bl	800356c <__sinit>
 800326a:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <__swsetup_r+0xd0>)
 800326c:	429c      	cmp	r4, r3
 800326e:	d10f      	bne.n	8003290 <__swsetup_r+0x3c>
 8003270:	686c      	ldr	r4, [r5, #4]
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003278:	0719      	lsls	r1, r3, #28
 800327a:	d42c      	bmi.n	80032d6 <__swsetup_r+0x82>
 800327c:	06dd      	lsls	r5, r3, #27
 800327e:	d411      	bmi.n	80032a4 <__swsetup_r+0x50>
 8003280:	2309      	movs	r3, #9
 8003282:	6033      	str	r3, [r6, #0]
 8003284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	81a3      	strh	r3, [r4, #12]
 800328e:	e03e      	b.n	800330e <__swsetup_r+0xba>
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <__swsetup_r+0xd4>)
 8003292:	429c      	cmp	r4, r3
 8003294:	d101      	bne.n	800329a <__swsetup_r+0x46>
 8003296:	68ac      	ldr	r4, [r5, #8]
 8003298:	e7eb      	b.n	8003272 <__swsetup_r+0x1e>
 800329a:	4b24      	ldr	r3, [pc, #144]	; (800332c <__swsetup_r+0xd8>)
 800329c:	429c      	cmp	r4, r3
 800329e:	bf08      	it	eq
 80032a0:	68ec      	ldreq	r4, [r5, #12]
 80032a2:	e7e6      	b.n	8003272 <__swsetup_r+0x1e>
 80032a4:	0758      	lsls	r0, r3, #29
 80032a6:	d512      	bpl.n	80032ce <__swsetup_r+0x7a>
 80032a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032aa:	b141      	cbz	r1, 80032be <__swsetup_r+0x6a>
 80032ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032b0:	4299      	cmp	r1, r3
 80032b2:	d002      	beq.n	80032ba <__swsetup_r+0x66>
 80032b4:	4630      	mov	r0, r6
 80032b6:	f7ff fba1 	bl	80029fc <_free_r>
 80032ba:	2300      	movs	r3, #0
 80032bc:	6363      	str	r3, [r4, #52]	; 0x34
 80032be:	89a3      	ldrh	r3, [r4, #12]
 80032c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032c4:	81a3      	strh	r3, [r4, #12]
 80032c6:	2300      	movs	r3, #0
 80032c8:	6063      	str	r3, [r4, #4]
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	6023      	str	r3, [r4, #0]
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	f043 0308 	orr.w	r3, r3, #8
 80032d4:	81a3      	strh	r3, [r4, #12]
 80032d6:	6923      	ldr	r3, [r4, #16]
 80032d8:	b94b      	cbnz	r3, 80032ee <__swsetup_r+0x9a>
 80032da:	89a3      	ldrh	r3, [r4, #12]
 80032dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d003      	beq.n	80032ee <__swsetup_r+0x9a>
 80032e6:	4621      	mov	r1, r4
 80032e8:	4630      	mov	r0, r6
 80032ea:	f000 fa05 	bl	80036f8 <__smakebuf_r>
 80032ee:	89a0      	ldrh	r0, [r4, #12]
 80032f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032f4:	f010 0301 	ands.w	r3, r0, #1
 80032f8:	d00a      	beq.n	8003310 <__swsetup_r+0xbc>
 80032fa:	2300      	movs	r3, #0
 80032fc:	60a3      	str	r3, [r4, #8]
 80032fe:	6963      	ldr	r3, [r4, #20]
 8003300:	425b      	negs	r3, r3
 8003302:	61a3      	str	r3, [r4, #24]
 8003304:	6923      	ldr	r3, [r4, #16]
 8003306:	b943      	cbnz	r3, 800331a <__swsetup_r+0xc6>
 8003308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800330c:	d1ba      	bne.n	8003284 <__swsetup_r+0x30>
 800330e:	bd70      	pop	{r4, r5, r6, pc}
 8003310:	0781      	lsls	r1, r0, #30
 8003312:	bf58      	it	pl
 8003314:	6963      	ldrpl	r3, [r4, #20]
 8003316:	60a3      	str	r3, [r4, #8]
 8003318:	e7f4      	b.n	8003304 <__swsetup_r+0xb0>
 800331a:	2000      	movs	r0, #0
 800331c:	e7f7      	b.n	800330e <__swsetup_r+0xba>
 800331e:	bf00      	nop
 8003320:	2000000c 	.word	0x2000000c
 8003324:	08003acc 	.word	0x08003acc
 8003328:	08003aec 	.word	0x08003aec
 800332c:	08003aac 	.word	0x08003aac

08003330 <abort>:
 8003330:	2006      	movs	r0, #6
 8003332:	b508      	push	{r3, lr}
 8003334:	f000 fa62 	bl	80037fc <raise>
 8003338:	2001      	movs	r0, #1
 800333a:	f7ff f9b4 	bl	80026a6 <_exit>
	...

08003340 <__sflush_r>:
 8003340:	898a      	ldrh	r2, [r1, #12]
 8003342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003344:	4605      	mov	r5, r0
 8003346:	0710      	lsls	r0, r2, #28
 8003348:	460c      	mov	r4, r1
 800334a:	d457      	bmi.n	80033fc <__sflush_r+0xbc>
 800334c:	684b      	ldr	r3, [r1, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	dc04      	bgt.n	800335c <__sflush_r+0x1c>
 8003352:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	dc01      	bgt.n	800335c <__sflush_r+0x1c>
 8003358:	2000      	movs	r0, #0
 800335a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800335c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800335e:	2e00      	cmp	r6, #0
 8003360:	d0fa      	beq.n	8003358 <__sflush_r+0x18>
 8003362:	2300      	movs	r3, #0
 8003364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003368:	682f      	ldr	r7, [r5, #0]
 800336a:	602b      	str	r3, [r5, #0]
 800336c:	d032      	beq.n	80033d4 <__sflush_r+0x94>
 800336e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	075a      	lsls	r2, r3, #29
 8003374:	d505      	bpl.n	8003382 <__sflush_r+0x42>
 8003376:	6863      	ldr	r3, [r4, #4]
 8003378:	1ac0      	subs	r0, r0, r3
 800337a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800337c:	b10b      	cbz	r3, 8003382 <__sflush_r+0x42>
 800337e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003380:	1ac0      	subs	r0, r0, r3
 8003382:	2300      	movs	r3, #0
 8003384:	4602      	mov	r2, r0
 8003386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003388:	4628      	mov	r0, r5
 800338a:	6a21      	ldr	r1, [r4, #32]
 800338c:	47b0      	blx	r6
 800338e:	1c43      	adds	r3, r0, #1
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	d106      	bne.n	80033a2 <__sflush_r+0x62>
 8003394:	6829      	ldr	r1, [r5, #0]
 8003396:	291d      	cmp	r1, #29
 8003398:	d82c      	bhi.n	80033f4 <__sflush_r+0xb4>
 800339a:	4a29      	ldr	r2, [pc, #164]	; (8003440 <__sflush_r+0x100>)
 800339c:	40ca      	lsrs	r2, r1
 800339e:	07d6      	lsls	r6, r2, #31
 80033a0:	d528      	bpl.n	80033f4 <__sflush_r+0xb4>
 80033a2:	2200      	movs	r2, #0
 80033a4:	6062      	str	r2, [r4, #4]
 80033a6:	6922      	ldr	r2, [r4, #16]
 80033a8:	04d9      	lsls	r1, r3, #19
 80033aa:	6022      	str	r2, [r4, #0]
 80033ac:	d504      	bpl.n	80033b8 <__sflush_r+0x78>
 80033ae:	1c42      	adds	r2, r0, #1
 80033b0:	d101      	bne.n	80033b6 <__sflush_r+0x76>
 80033b2:	682b      	ldr	r3, [r5, #0]
 80033b4:	b903      	cbnz	r3, 80033b8 <__sflush_r+0x78>
 80033b6:	6560      	str	r0, [r4, #84]	; 0x54
 80033b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033ba:	602f      	str	r7, [r5, #0]
 80033bc:	2900      	cmp	r1, #0
 80033be:	d0cb      	beq.n	8003358 <__sflush_r+0x18>
 80033c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033c4:	4299      	cmp	r1, r3
 80033c6:	d002      	beq.n	80033ce <__sflush_r+0x8e>
 80033c8:	4628      	mov	r0, r5
 80033ca:	f7ff fb17 	bl	80029fc <_free_r>
 80033ce:	2000      	movs	r0, #0
 80033d0:	6360      	str	r0, [r4, #52]	; 0x34
 80033d2:	e7c2      	b.n	800335a <__sflush_r+0x1a>
 80033d4:	6a21      	ldr	r1, [r4, #32]
 80033d6:	2301      	movs	r3, #1
 80033d8:	4628      	mov	r0, r5
 80033da:	47b0      	blx	r6
 80033dc:	1c41      	adds	r1, r0, #1
 80033de:	d1c7      	bne.n	8003370 <__sflush_r+0x30>
 80033e0:	682b      	ldr	r3, [r5, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0c4      	beq.n	8003370 <__sflush_r+0x30>
 80033e6:	2b1d      	cmp	r3, #29
 80033e8:	d001      	beq.n	80033ee <__sflush_r+0xae>
 80033ea:	2b16      	cmp	r3, #22
 80033ec:	d101      	bne.n	80033f2 <__sflush_r+0xb2>
 80033ee:	602f      	str	r7, [r5, #0]
 80033f0:	e7b2      	b.n	8003358 <__sflush_r+0x18>
 80033f2:	89a3      	ldrh	r3, [r4, #12]
 80033f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f8:	81a3      	strh	r3, [r4, #12]
 80033fa:	e7ae      	b.n	800335a <__sflush_r+0x1a>
 80033fc:	690f      	ldr	r7, [r1, #16]
 80033fe:	2f00      	cmp	r7, #0
 8003400:	d0aa      	beq.n	8003358 <__sflush_r+0x18>
 8003402:	0793      	lsls	r3, r2, #30
 8003404:	bf18      	it	ne
 8003406:	2300      	movne	r3, #0
 8003408:	680e      	ldr	r6, [r1, #0]
 800340a:	bf08      	it	eq
 800340c:	694b      	ldreq	r3, [r1, #20]
 800340e:	1bf6      	subs	r6, r6, r7
 8003410:	600f      	str	r7, [r1, #0]
 8003412:	608b      	str	r3, [r1, #8]
 8003414:	2e00      	cmp	r6, #0
 8003416:	dd9f      	ble.n	8003358 <__sflush_r+0x18>
 8003418:	4633      	mov	r3, r6
 800341a:	463a      	mov	r2, r7
 800341c:	4628      	mov	r0, r5
 800341e:	6a21      	ldr	r1, [r4, #32]
 8003420:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003424:	47e0      	blx	ip
 8003426:	2800      	cmp	r0, #0
 8003428:	dc06      	bgt.n	8003438 <__sflush_r+0xf8>
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003434:	81a3      	strh	r3, [r4, #12]
 8003436:	e790      	b.n	800335a <__sflush_r+0x1a>
 8003438:	4407      	add	r7, r0
 800343a:	1a36      	subs	r6, r6, r0
 800343c:	e7ea      	b.n	8003414 <__sflush_r+0xd4>
 800343e:	bf00      	nop
 8003440:	20400001 	.word	0x20400001

08003444 <_fflush_r>:
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	690b      	ldr	r3, [r1, #16]
 8003448:	4605      	mov	r5, r0
 800344a:	460c      	mov	r4, r1
 800344c:	b913      	cbnz	r3, 8003454 <_fflush_r+0x10>
 800344e:	2500      	movs	r5, #0
 8003450:	4628      	mov	r0, r5
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	b118      	cbz	r0, 800345e <_fflush_r+0x1a>
 8003456:	6983      	ldr	r3, [r0, #24]
 8003458:	b90b      	cbnz	r3, 800345e <_fflush_r+0x1a>
 800345a:	f000 f887 	bl	800356c <__sinit>
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <_fflush_r+0x6c>)
 8003460:	429c      	cmp	r4, r3
 8003462:	d11b      	bne.n	800349c <_fflush_r+0x58>
 8003464:	686c      	ldr	r4, [r5, #4]
 8003466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0ef      	beq.n	800344e <_fflush_r+0xa>
 800346e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003470:	07d0      	lsls	r0, r2, #31
 8003472:	d404      	bmi.n	800347e <_fflush_r+0x3a>
 8003474:	0599      	lsls	r1, r3, #22
 8003476:	d402      	bmi.n	800347e <_fflush_r+0x3a>
 8003478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800347a:	f000 f915 	bl	80036a8 <__retarget_lock_acquire_recursive>
 800347e:	4628      	mov	r0, r5
 8003480:	4621      	mov	r1, r4
 8003482:	f7ff ff5d 	bl	8003340 <__sflush_r>
 8003486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003488:	4605      	mov	r5, r0
 800348a:	07da      	lsls	r2, r3, #31
 800348c:	d4e0      	bmi.n	8003450 <_fflush_r+0xc>
 800348e:	89a3      	ldrh	r3, [r4, #12]
 8003490:	059b      	lsls	r3, r3, #22
 8003492:	d4dd      	bmi.n	8003450 <_fflush_r+0xc>
 8003494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003496:	f000 f908 	bl	80036aa <__retarget_lock_release_recursive>
 800349a:	e7d9      	b.n	8003450 <_fflush_r+0xc>
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <_fflush_r+0x70>)
 800349e:	429c      	cmp	r4, r3
 80034a0:	d101      	bne.n	80034a6 <_fflush_r+0x62>
 80034a2:	68ac      	ldr	r4, [r5, #8]
 80034a4:	e7df      	b.n	8003466 <_fflush_r+0x22>
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <_fflush_r+0x74>)
 80034a8:	429c      	cmp	r4, r3
 80034aa:	bf08      	it	eq
 80034ac:	68ec      	ldreq	r4, [r5, #12]
 80034ae:	e7da      	b.n	8003466 <_fflush_r+0x22>
 80034b0:	08003acc 	.word	0x08003acc
 80034b4:	08003aec 	.word	0x08003aec
 80034b8:	08003aac 	.word	0x08003aac

080034bc <std>:
 80034bc:	2300      	movs	r3, #0
 80034be:	b510      	push	{r4, lr}
 80034c0:	4604      	mov	r4, r0
 80034c2:	e9c0 3300 	strd	r3, r3, [r0]
 80034c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ca:	6083      	str	r3, [r0, #8]
 80034cc:	8181      	strh	r1, [r0, #12]
 80034ce:	6643      	str	r3, [r0, #100]	; 0x64
 80034d0:	81c2      	strh	r2, [r0, #14]
 80034d2:	6183      	str	r3, [r0, #24]
 80034d4:	4619      	mov	r1, r3
 80034d6:	2208      	movs	r2, #8
 80034d8:	305c      	adds	r0, #92	; 0x5c
 80034da:	f7ff fa11 	bl	8002900 <memset>
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <std+0x38>)
 80034e0:	6224      	str	r4, [r4, #32]
 80034e2:	6263      	str	r3, [r4, #36]	; 0x24
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <std+0x3c>)
 80034e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80034e8:	4b04      	ldr	r3, [pc, #16]	; (80034fc <std+0x40>)
 80034ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <std+0x44>)
 80034ee:	6323      	str	r3, [r4, #48]	; 0x30
 80034f0:	bd10      	pop	{r4, pc}
 80034f2:	bf00      	nop
 80034f4:	08003835 	.word	0x08003835
 80034f8:	08003857 	.word	0x08003857
 80034fc:	0800388f 	.word	0x0800388f
 8003500:	080038b3 	.word	0x080038b3

08003504 <_cleanup_r>:
 8003504:	4901      	ldr	r1, [pc, #4]	; (800350c <_cleanup_r+0x8>)
 8003506:	f000 b8af 	b.w	8003668 <_fwalk_reent>
 800350a:	bf00      	nop
 800350c:	08003445 	.word	0x08003445

08003510 <__sfmoreglue>:
 8003510:	2268      	movs	r2, #104	; 0x68
 8003512:	b570      	push	{r4, r5, r6, lr}
 8003514:	1e4d      	subs	r5, r1, #1
 8003516:	4355      	muls	r5, r2
 8003518:	460e      	mov	r6, r1
 800351a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800351e:	f7ff fad5 	bl	8002acc <_malloc_r>
 8003522:	4604      	mov	r4, r0
 8003524:	b140      	cbz	r0, 8003538 <__sfmoreglue+0x28>
 8003526:	2100      	movs	r1, #0
 8003528:	e9c0 1600 	strd	r1, r6, [r0]
 800352c:	300c      	adds	r0, #12
 800352e:	60a0      	str	r0, [r4, #8]
 8003530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003534:	f7ff f9e4 	bl	8002900 <memset>
 8003538:	4620      	mov	r0, r4
 800353a:	bd70      	pop	{r4, r5, r6, pc}

0800353c <__sfp_lock_acquire>:
 800353c:	4801      	ldr	r0, [pc, #4]	; (8003544 <__sfp_lock_acquire+0x8>)
 800353e:	f000 b8b3 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 8003542:	bf00      	nop
 8003544:	2000012d 	.word	0x2000012d

08003548 <__sfp_lock_release>:
 8003548:	4801      	ldr	r0, [pc, #4]	; (8003550 <__sfp_lock_release+0x8>)
 800354a:	f000 b8ae 	b.w	80036aa <__retarget_lock_release_recursive>
 800354e:	bf00      	nop
 8003550:	2000012d 	.word	0x2000012d

08003554 <__sinit_lock_acquire>:
 8003554:	4801      	ldr	r0, [pc, #4]	; (800355c <__sinit_lock_acquire+0x8>)
 8003556:	f000 b8a7 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 800355a:	bf00      	nop
 800355c:	2000012e 	.word	0x2000012e

08003560 <__sinit_lock_release>:
 8003560:	4801      	ldr	r0, [pc, #4]	; (8003568 <__sinit_lock_release+0x8>)
 8003562:	f000 b8a2 	b.w	80036aa <__retarget_lock_release_recursive>
 8003566:	bf00      	nop
 8003568:	2000012e 	.word	0x2000012e

0800356c <__sinit>:
 800356c:	b510      	push	{r4, lr}
 800356e:	4604      	mov	r4, r0
 8003570:	f7ff fff0 	bl	8003554 <__sinit_lock_acquire>
 8003574:	69a3      	ldr	r3, [r4, #24]
 8003576:	b11b      	cbz	r3, 8003580 <__sinit+0x14>
 8003578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800357c:	f7ff bff0 	b.w	8003560 <__sinit_lock_release>
 8003580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003584:	6523      	str	r3, [r4, #80]	; 0x50
 8003586:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <__sinit+0x68>)
 8003588:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <__sinit+0x6c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	62a2      	str	r2, [r4, #40]	; 0x28
 800358e:	42a3      	cmp	r3, r4
 8003590:	bf08      	it	eq
 8003592:	2301      	moveq	r3, #1
 8003594:	4620      	mov	r0, r4
 8003596:	bf08      	it	eq
 8003598:	61a3      	streq	r3, [r4, #24]
 800359a:	f000 f81f 	bl	80035dc <__sfp>
 800359e:	6060      	str	r0, [r4, #4]
 80035a0:	4620      	mov	r0, r4
 80035a2:	f000 f81b 	bl	80035dc <__sfp>
 80035a6:	60a0      	str	r0, [r4, #8]
 80035a8:	4620      	mov	r0, r4
 80035aa:	f000 f817 	bl	80035dc <__sfp>
 80035ae:	2200      	movs	r2, #0
 80035b0:	2104      	movs	r1, #4
 80035b2:	60e0      	str	r0, [r4, #12]
 80035b4:	6860      	ldr	r0, [r4, #4]
 80035b6:	f7ff ff81 	bl	80034bc <std>
 80035ba:	2201      	movs	r2, #1
 80035bc:	2109      	movs	r1, #9
 80035be:	68a0      	ldr	r0, [r4, #8]
 80035c0:	f7ff ff7c 	bl	80034bc <std>
 80035c4:	2202      	movs	r2, #2
 80035c6:	2112      	movs	r1, #18
 80035c8:	68e0      	ldr	r0, [r4, #12]
 80035ca:	f7ff ff77 	bl	80034bc <std>
 80035ce:	2301      	movs	r3, #1
 80035d0:	61a3      	str	r3, [r4, #24]
 80035d2:	e7d1      	b.n	8003578 <__sinit+0xc>
 80035d4:	080039c4 	.word	0x080039c4
 80035d8:	08003505 	.word	0x08003505

080035dc <__sfp>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	4607      	mov	r7, r0
 80035e0:	f7ff ffac 	bl	800353c <__sfp_lock_acquire>
 80035e4:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <__sfp+0x84>)
 80035e6:	681e      	ldr	r6, [r3, #0]
 80035e8:	69b3      	ldr	r3, [r6, #24]
 80035ea:	b913      	cbnz	r3, 80035f2 <__sfp+0x16>
 80035ec:	4630      	mov	r0, r6
 80035ee:	f7ff ffbd 	bl	800356c <__sinit>
 80035f2:	3648      	adds	r6, #72	; 0x48
 80035f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	d503      	bpl.n	8003604 <__sfp+0x28>
 80035fc:	6833      	ldr	r3, [r6, #0]
 80035fe:	b30b      	cbz	r3, 8003644 <__sfp+0x68>
 8003600:	6836      	ldr	r6, [r6, #0]
 8003602:	e7f7      	b.n	80035f4 <__sfp+0x18>
 8003604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003608:	b9d5      	cbnz	r5, 8003640 <__sfp+0x64>
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <__sfp+0x88>)
 800360c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003610:	60e3      	str	r3, [r4, #12]
 8003612:	6665      	str	r5, [r4, #100]	; 0x64
 8003614:	f000 f847 	bl	80036a6 <__retarget_lock_init_recursive>
 8003618:	f7ff ff96 	bl	8003548 <__sfp_lock_release>
 800361c:	2208      	movs	r2, #8
 800361e:	4629      	mov	r1, r5
 8003620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003628:	6025      	str	r5, [r4, #0]
 800362a:	61a5      	str	r5, [r4, #24]
 800362c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003630:	f7ff f966 	bl	8002900 <memset>
 8003634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800363c:	4620      	mov	r0, r4
 800363e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003640:	3468      	adds	r4, #104	; 0x68
 8003642:	e7d9      	b.n	80035f8 <__sfp+0x1c>
 8003644:	2104      	movs	r1, #4
 8003646:	4638      	mov	r0, r7
 8003648:	f7ff ff62 	bl	8003510 <__sfmoreglue>
 800364c:	4604      	mov	r4, r0
 800364e:	6030      	str	r0, [r6, #0]
 8003650:	2800      	cmp	r0, #0
 8003652:	d1d5      	bne.n	8003600 <__sfp+0x24>
 8003654:	f7ff ff78 	bl	8003548 <__sfp_lock_release>
 8003658:	230c      	movs	r3, #12
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	e7ee      	b.n	800363c <__sfp+0x60>
 800365e:	bf00      	nop
 8003660:	080039c4 	.word	0x080039c4
 8003664:	ffff0001 	.word	0xffff0001

08003668 <_fwalk_reent>:
 8003668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800366c:	4606      	mov	r6, r0
 800366e:	4688      	mov	r8, r1
 8003670:	2700      	movs	r7, #0
 8003672:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800367a:	f1b9 0901 	subs.w	r9, r9, #1
 800367e:	d505      	bpl.n	800368c <_fwalk_reent+0x24>
 8003680:	6824      	ldr	r4, [r4, #0]
 8003682:	2c00      	cmp	r4, #0
 8003684:	d1f7      	bne.n	8003676 <_fwalk_reent+0xe>
 8003686:	4638      	mov	r0, r7
 8003688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800368c:	89ab      	ldrh	r3, [r5, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d907      	bls.n	80036a2 <_fwalk_reent+0x3a>
 8003692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003696:	3301      	adds	r3, #1
 8003698:	d003      	beq.n	80036a2 <_fwalk_reent+0x3a>
 800369a:	4629      	mov	r1, r5
 800369c:	4630      	mov	r0, r6
 800369e:	47c0      	blx	r8
 80036a0:	4307      	orrs	r7, r0
 80036a2:	3568      	adds	r5, #104	; 0x68
 80036a4:	e7e9      	b.n	800367a <_fwalk_reent+0x12>

080036a6 <__retarget_lock_init_recursive>:
 80036a6:	4770      	bx	lr

080036a8 <__retarget_lock_acquire_recursive>:
 80036a8:	4770      	bx	lr

080036aa <__retarget_lock_release_recursive>:
 80036aa:	4770      	bx	lr

080036ac <__swhatbuf_r>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	460e      	mov	r6, r1
 80036b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b4:	4614      	mov	r4, r2
 80036b6:	2900      	cmp	r1, #0
 80036b8:	461d      	mov	r5, r3
 80036ba:	b096      	sub	sp, #88	; 0x58
 80036bc:	da08      	bge.n	80036d0 <__swhatbuf_r+0x24>
 80036be:	2200      	movs	r2, #0
 80036c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80036c4:	602a      	str	r2, [r5, #0]
 80036c6:	061a      	lsls	r2, r3, #24
 80036c8:	d410      	bmi.n	80036ec <__swhatbuf_r+0x40>
 80036ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ce:	e00e      	b.n	80036ee <__swhatbuf_r+0x42>
 80036d0:	466a      	mov	r2, sp
 80036d2:	f000 f915 	bl	8003900 <_fstat_r>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	dbf1      	blt.n	80036be <__swhatbuf_r+0x12>
 80036da:	9a01      	ldr	r2, [sp, #4]
 80036dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036e4:	425a      	negs	r2, r3
 80036e6:	415a      	adcs	r2, r3
 80036e8:	602a      	str	r2, [r5, #0]
 80036ea:	e7ee      	b.n	80036ca <__swhatbuf_r+0x1e>
 80036ec:	2340      	movs	r3, #64	; 0x40
 80036ee:	2000      	movs	r0, #0
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	b016      	add	sp, #88	; 0x58
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080036f8 <__smakebuf_r>:
 80036f8:	898b      	ldrh	r3, [r1, #12]
 80036fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036fc:	079d      	lsls	r5, r3, #30
 80036fe:	4606      	mov	r6, r0
 8003700:	460c      	mov	r4, r1
 8003702:	d507      	bpl.n	8003714 <__smakebuf_r+0x1c>
 8003704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	2301      	movs	r3, #1
 800370e:	6163      	str	r3, [r4, #20]
 8003710:	b002      	add	sp, #8
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	466a      	mov	r2, sp
 8003716:	ab01      	add	r3, sp, #4
 8003718:	f7ff ffc8 	bl	80036ac <__swhatbuf_r>
 800371c:	9900      	ldr	r1, [sp, #0]
 800371e:	4605      	mov	r5, r0
 8003720:	4630      	mov	r0, r6
 8003722:	f7ff f9d3 	bl	8002acc <_malloc_r>
 8003726:	b948      	cbnz	r0, 800373c <__smakebuf_r+0x44>
 8003728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800372c:	059a      	lsls	r2, r3, #22
 800372e:	d4ef      	bmi.n	8003710 <__smakebuf_r+0x18>
 8003730:	f023 0303 	bic.w	r3, r3, #3
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	81a3      	strh	r3, [r4, #12]
 800373a:	e7e3      	b.n	8003704 <__smakebuf_r+0xc>
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <__smakebuf_r+0x7c>)
 800373e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	6020      	str	r0, [r4, #0]
 8003744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	9b00      	ldr	r3, [sp, #0]
 800374c:	6120      	str	r0, [r4, #16]
 800374e:	6163      	str	r3, [r4, #20]
 8003750:	9b01      	ldr	r3, [sp, #4]
 8003752:	b15b      	cbz	r3, 800376c <__smakebuf_r+0x74>
 8003754:	4630      	mov	r0, r6
 8003756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800375a:	f000 f8e3 	bl	8003924 <_isatty_r>
 800375e:	b128      	cbz	r0, 800376c <__smakebuf_r+0x74>
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	89a0      	ldrh	r0, [r4, #12]
 800376e:	4305      	orrs	r5, r0
 8003770:	81a5      	strh	r5, [r4, #12]
 8003772:	e7cd      	b.n	8003710 <__smakebuf_r+0x18>
 8003774:	08003505 	.word	0x08003505

08003778 <memchr>:
 8003778:	4603      	mov	r3, r0
 800377a:	b510      	push	{r4, lr}
 800377c:	b2c9      	uxtb	r1, r1
 800377e:	4402      	add	r2, r0
 8003780:	4293      	cmp	r3, r2
 8003782:	4618      	mov	r0, r3
 8003784:	d101      	bne.n	800378a <memchr+0x12>
 8003786:	2000      	movs	r0, #0
 8003788:	e003      	b.n	8003792 <memchr+0x1a>
 800378a:	7804      	ldrb	r4, [r0, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	428c      	cmp	r4, r1
 8003790:	d1f6      	bne.n	8003780 <memchr+0x8>
 8003792:	bd10      	pop	{r4, pc}

08003794 <__malloc_lock>:
 8003794:	4801      	ldr	r0, [pc, #4]	; (800379c <__malloc_lock+0x8>)
 8003796:	f7ff bf87 	b.w	80036a8 <__retarget_lock_acquire_recursive>
 800379a:	bf00      	nop
 800379c:	2000012c 	.word	0x2000012c

080037a0 <__malloc_unlock>:
 80037a0:	4801      	ldr	r0, [pc, #4]	; (80037a8 <__malloc_unlock+0x8>)
 80037a2:	f7ff bf82 	b.w	80036aa <__retarget_lock_release_recursive>
 80037a6:	bf00      	nop
 80037a8:	2000012c 	.word	0x2000012c

080037ac <_raise_r>:
 80037ac:	291f      	cmp	r1, #31
 80037ae:	b538      	push	{r3, r4, r5, lr}
 80037b0:	4604      	mov	r4, r0
 80037b2:	460d      	mov	r5, r1
 80037b4:	d904      	bls.n	80037c0 <_raise_r+0x14>
 80037b6:	2316      	movs	r3, #22
 80037b8:	6003      	str	r3, [r0, #0]
 80037ba:	f04f 30ff 	mov.w	r0, #4294967295
 80037be:	bd38      	pop	{r3, r4, r5, pc}
 80037c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80037c2:	b112      	cbz	r2, 80037ca <_raise_r+0x1e>
 80037c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80037c8:	b94b      	cbnz	r3, 80037de <_raise_r+0x32>
 80037ca:	4620      	mov	r0, r4
 80037cc:	f000 f830 	bl	8003830 <_getpid_r>
 80037d0:	462a      	mov	r2, r5
 80037d2:	4601      	mov	r1, r0
 80037d4:	4620      	mov	r0, r4
 80037d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037da:	f000 b817 	b.w	800380c <_kill_r>
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d00a      	beq.n	80037f8 <_raise_r+0x4c>
 80037e2:	1c59      	adds	r1, r3, #1
 80037e4:	d103      	bne.n	80037ee <_raise_r+0x42>
 80037e6:	2316      	movs	r3, #22
 80037e8:	6003      	str	r3, [r0, #0]
 80037ea:	2001      	movs	r0, #1
 80037ec:	e7e7      	b.n	80037be <_raise_r+0x12>
 80037ee:	2400      	movs	r4, #0
 80037f0:	4628      	mov	r0, r5
 80037f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80037f6:	4798      	blx	r3
 80037f8:	2000      	movs	r0, #0
 80037fa:	e7e0      	b.n	80037be <_raise_r+0x12>

080037fc <raise>:
 80037fc:	4b02      	ldr	r3, [pc, #8]	; (8003808 <raise+0xc>)
 80037fe:	4601      	mov	r1, r0
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	f7ff bfd3 	b.w	80037ac <_raise_r>
 8003806:	bf00      	nop
 8003808:	2000000c 	.word	0x2000000c

0800380c <_kill_r>:
 800380c:	b538      	push	{r3, r4, r5, lr}
 800380e:	2300      	movs	r3, #0
 8003810:	4d06      	ldr	r5, [pc, #24]	; (800382c <_kill_r+0x20>)
 8003812:	4604      	mov	r4, r0
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	f7fe ff34 	bl	8002686 <_kill>
 800381e:	1c43      	adds	r3, r0, #1
 8003820:	d102      	bne.n	8003828 <_kill_r+0x1c>
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	b103      	cbz	r3, 8003828 <_kill_r+0x1c>
 8003826:	6023      	str	r3, [r4, #0]
 8003828:	bd38      	pop	{r3, r4, r5, pc}
 800382a:	bf00      	nop
 800382c:	20000130 	.word	0x20000130

08003830 <_getpid_r>:
 8003830:	f7fe bf22 	b.w	8002678 <_getpid>

08003834 <__sread>:
 8003834:	b510      	push	{r4, lr}
 8003836:	460c      	mov	r4, r1
 8003838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800383c:	f000 f894 	bl	8003968 <_read_r>
 8003840:	2800      	cmp	r0, #0
 8003842:	bfab      	itete	ge
 8003844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003846:	89a3      	ldrhlt	r3, [r4, #12]
 8003848:	181b      	addge	r3, r3, r0
 800384a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800384e:	bfac      	ite	ge
 8003850:	6563      	strge	r3, [r4, #84]	; 0x54
 8003852:	81a3      	strhlt	r3, [r4, #12]
 8003854:	bd10      	pop	{r4, pc}

08003856 <__swrite>:
 8003856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800385a:	461f      	mov	r7, r3
 800385c:	898b      	ldrh	r3, [r1, #12]
 800385e:	4605      	mov	r5, r0
 8003860:	05db      	lsls	r3, r3, #23
 8003862:	460c      	mov	r4, r1
 8003864:	4616      	mov	r6, r2
 8003866:	d505      	bpl.n	8003874 <__swrite+0x1e>
 8003868:	2302      	movs	r3, #2
 800386a:	2200      	movs	r2, #0
 800386c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003870:	f000 f868 	bl	8003944 <_lseek_r>
 8003874:	89a3      	ldrh	r3, [r4, #12]
 8003876:	4632      	mov	r2, r6
 8003878:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800387c:	81a3      	strh	r3, [r4, #12]
 800387e:	4628      	mov	r0, r5
 8003880:	463b      	mov	r3, r7
 8003882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800388a:	f000 b817 	b.w	80038bc <_write_r>

0800388e <__sseek>:
 800388e:	b510      	push	{r4, lr}
 8003890:	460c      	mov	r4, r1
 8003892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003896:	f000 f855 	bl	8003944 <_lseek_r>
 800389a:	1c43      	adds	r3, r0, #1
 800389c:	89a3      	ldrh	r3, [r4, #12]
 800389e:	bf15      	itete	ne
 80038a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80038a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038aa:	81a3      	strheq	r3, [r4, #12]
 80038ac:	bf18      	it	ne
 80038ae:	81a3      	strhne	r3, [r4, #12]
 80038b0:	bd10      	pop	{r4, pc}

080038b2 <__sclose>:
 80038b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038b6:	f000 b813 	b.w	80038e0 <_close_r>
	...

080038bc <_write_r>:
 80038bc:	b538      	push	{r3, r4, r5, lr}
 80038be:	4604      	mov	r4, r0
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	2200      	movs	r2, #0
 80038c6:	4d05      	ldr	r5, [pc, #20]	; (80038dc <_write_r+0x20>)
 80038c8:	602a      	str	r2, [r5, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f7fe ff12 	bl	80026f4 <_write>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_write_r+0x1e>
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	b103      	cbz	r3, 80038da <_write_r+0x1e>
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	20000130 	.word	0x20000130

080038e0 <_close_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	2300      	movs	r3, #0
 80038e4:	4d05      	ldr	r5, [pc, #20]	; (80038fc <_close_r+0x1c>)
 80038e6:	4604      	mov	r4, r0
 80038e8:	4608      	mov	r0, r1
 80038ea:	602b      	str	r3, [r5, #0]
 80038ec:	f7fe ff1e 	bl	800272c <_close>
 80038f0:	1c43      	adds	r3, r0, #1
 80038f2:	d102      	bne.n	80038fa <_close_r+0x1a>
 80038f4:	682b      	ldr	r3, [r5, #0]
 80038f6:	b103      	cbz	r3, 80038fa <_close_r+0x1a>
 80038f8:	6023      	str	r3, [r4, #0]
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
 80038fc:	20000130 	.word	0x20000130

08003900 <_fstat_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	2300      	movs	r3, #0
 8003904:	4d06      	ldr	r5, [pc, #24]	; (8003920 <_fstat_r+0x20>)
 8003906:	4604      	mov	r4, r0
 8003908:	4608      	mov	r0, r1
 800390a:	4611      	mov	r1, r2
 800390c:	602b      	str	r3, [r5, #0]
 800390e:	f7fe ff18 	bl	8002742 <_fstat>
 8003912:	1c43      	adds	r3, r0, #1
 8003914:	d102      	bne.n	800391c <_fstat_r+0x1c>
 8003916:	682b      	ldr	r3, [r5, #0]
 8003918:	b103      	cbz	r3, 800391c <_fstat_r+0x1c>
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	bd38      	pop	{r3, r4, r5, pc}
 800391e:	bf00      	nop
 8003920:	20000130 	.word	0x20000130

08003924 <_isatty_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	2300      	movs	r3, #0
 8003928:	4d05      	ldr	r5, [pc, #20]	; (8003940 <_isatty_r+0x1c>)
 800392a:	4604      	mov	r4, r0
 800392c:	4608      	mov	r0, r1
 800392e:	602b      	str	r3, [r5, #0]
 8003930:	f7fe ff16 	bl	8002760 <_isatty>
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	d102      	bne.n	800393e <_isatty_r+0x1a>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	b103      	cbz	r3, 800393e <_isatty_r+0x1a>
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	20000130 	.word	0x20000130

08003944 <_lseek_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	4604      	mov	r4, r0
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	2200      	movs	r2, #0
 800394e:	4d05      	ldr	r5, [pc, #20]	; (8003964 <_lseek_r+0x20>)
 8003950:	602a      	str	r2, [r5, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	f7fe ff0e 	bl	8002774 <_lseek>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d102      	bne.n	8003962 <_lseek_r+0x1e>
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	b103      	cbz	r3, 8003962 <_lseek_r+0x1e>
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	20000130 	.word	0x20000130

08003968 <_read_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4604      	mov	r4, r0
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	2200      	movs	r2, #0
 8003972:	4d05      	ldr	r5, [pc, #20]	; (8003988 <_read_r+0x20>)
 8003974:	602a      	str	r2, [r5, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	f7fe fe9f 	bl	80026ba <_read>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_read_r+0x1e>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	b103      	cbz	r3, 8003986 <_read_r+0x1e>
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	20000130 	.word	0x20000130

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
