Khung truyền UART:
	Nhận : PC->STM32
		|STX |   CMD   |OPTION |DATA    |ETX |
		|0x02|  4bytes |3bytes |12 bytes|0x03|
	
	Truyền: STM32-> PC
		DATA[400 bytes] use DMA 







I. Encoder:
	Thanh ghi encoder đọc giá trị liên tục, 0->2^15 tràn và đếm lại or 2^15->0 tùy chiều
	Tùy theo phần cứng: ở đây
		encoder quay 11 vòng -> trục chính động cơ quay 1 vòng
			-> mode x4 => encoder quay 44 vòng  trục chính động cơ quay 1 vòng
		trục chính quay 168 vòng -> động cơ quay 1 vòng
		=> để quay được 1 vòng thì trên encoder count : 11*4*168 xung
		
		Để tính chính xác: để giá trị đếm mặc định:32768
			if(mPulse>=32768) //quay thuận
				g_mActPulse = mPulse - 32768;
				
			else if(mPulse<32768) //quay nghịch
				g_mActPulse=32768-mPulse;

1. Start timer encoder
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
	
2. Get value
	mPulse = __HAL_TIM_GetCounter(&htim4);

3. Set value
	__HAL_TIM_SetCounter(&htim4,value);
	
	
II. PWM:
	Ton : 0->100% tương ứng giá trị từ 0-> Count Period
	
	=> V1-0 = Von/12 -> tỉ lệ điện áp
1. Start timer PWM
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
2. Set Duty Cycle:
				//quay thuận
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Duty);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
		
				//quay nghịch
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, Duty);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
		
III. TIMER INTERRUPT

1. Start timer interrupt 
	HAL_TIM_Base_Start_IT(&htim2);
	
2. Write funtion callback

		void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
	  if (htim->Instance == htim2.Instance)
	  {
				//write something todo here 
	  }
	}

IV. PID
	